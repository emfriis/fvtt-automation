{
  "name": "Fighting Style: Protection",
  "type": "feat",
  "img": "icons/magic/defensive/shield-barrier-deflect-gold.webp",
  "data": {
    "description": {
      "value": "<p>When a creature you can see attacks a target other than you that is within 5 feet of you, you can use your reaction to impose disadvantage on the attack roll. You must be wielding a shield.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 72; 73; 84",
    "activation": {
      "type": "",
      "cost": null,
      "condition": "Must be wearing a shield."
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": "",
      "type": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "Fighter 1, Champion 10, Paladin 2",
    "recharge": {
      "value": null,
      "charged": false
    },
    "attunement": null
  },
  "effects": [
    {
      "_id": "dMmkyO885Hy67H2T",
      "changes": [
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "icons/magic/defensive/shield-barrier-deflect-gold.webp",
      "label": "Fighting Style: Protection",
      "origin": "Item.cPnfZdpmctuJYhOU",
      "transfer": true,
      "flags": {
        "dae": {
          "selfTarget": false,
          "stackable": "none",
          "durationExpression": "",
          "macroRepeat": "startEveryTurn",
          "specialDuration": [],
          "transfer": true
        },
        "core": {
          "statusId": ""
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": "macro.itemMacro"
    }
  ],
  "flags": {
    "core": {
      "sourceId": "Compendium.dnd5e.classfeatures.06NVMYf58Z76O85O"
    },
    "scene-packer": {
      "hash": "7e70f5bace25fe32026defd09f2abad9c70d20cd",
      "sourceId": "Item.TaQU80COMkn0cEoo"
    },
    "rest-recovery": {
      "data": {
        "recovery": {
          "enabled": false
        }
      }
    },
    "itemacro": {
      "macro": {
        "_id": null,
        "name": "Fighting Style: Protection",
        "type": "script",
        "author": "ckiTPzlaPztdkjV6",
        "img": "icons/svg/dice-target.svg",
        "scope": "global",
        "command": "const lastArg = args[args.length - 1];\nconst token = canvas.tokens.get(lastArg.tokenId);\nconst tokenOrActor = await fromUuid(lastArg.tokenUuid);\nconst tactor = tokenOrActor.actor ? tokenOrActor.actor : tokenOrActor;\n\nasync function attackCheck(workflow) {\n    if (![\"mwak\",\"rwak\",\"msak\",\"rsak\"].includes(workflow.item.data.data.actionType)) return;\n    let shield = await tactor.items.find(i => i.data.data?.armor?.type === \"shield\" && i.data.data.equipped);\n    let reactionUsed = await tactor.effects.find(e => e.data.label === \"Reaction\" || e.data.label === \"Incapacitated\")\n    if (tactor.data.data.attributes.hp.value < 1 || !shield || reactionUsed) return;\n\n    let tokenAttacker = canvas.tokens.get(workflow.tokenId);\n    let canSeeAttacker = true;\n    if (game.modules.get(\"conditional-visibility\")?.active && game.modules.get(\"levels\")?.active && _levels) { \n        canSeeAttacker = game.modules.get('conditional-visibility')?.api?.canSee(token, tokenAttacker) && _levels?.advancedLosTestVisibility(token, tokenAttacker);\n    }\n    if (!canSeeAttacker) return;\n\n    let workflowTargets = Array.from(workflow?.targets);\n    for (i = 0; i < workflowTargets.length; i++) {\n        if (workflowTargets[i].id === token.id || MidiQOL.getDistance(workflowTargets[i], token, false) > 5 || workflowTargets[i].data.disposition !== token.data.disposition) return;\n        let dialog = new Promise((resolve, reject) => {\n            new Dialog({\n            title: \"Fighting Style: Protection\",\n            content: `<p>Use your reaction to impose disadvantage on attack against ${workflowTargets[i].name}?</p>`,\n            buttons: {\n                one: {\n                    icon: '<i class=\"fas fa-check\"></i>',\n                    label: \"Confirm\",\n                    callback: () => resolve(true)\n                },\n                two: {\n                    icon: '<i class=\"fas fa-times\"></i>',\n                    label: \"Cancel\",\n                    callback: () => {resolve(false)}\n                }\n            },\n            default: \"two\",\n            close: callBack => {resolve(false)}\n            }).render(true);\n        });\n        useProtect = await dialog;\n        \n        if (useProtect) {\n            await Object.assign(workflow, { disadvantage: true });\n            const hasEffectApplied = game.dfreds.effectInterface.hasEffectApplied(\"Reaction\", tokenOrActor.uuid );\n            if (!hasEffectApplied) {\n                await game.dfreds.effectInterface.addEffect({ effectName: \"Reaction\", uuid: tactor.uuid });\n            }\n            return;\n        }\n    } \n}\n\nif (args[0] === \"each\") { // start of turn macros always run on combat start\n    const flag = await DAE.getFlag(tactor, \"proHook\");\n    if (flag) {\n        Hooks.off(\"midi-qol.preambleComplete\", flag);\n\t\tawait DAE.unsetFlag(tactor, \"proHook\");\n    }\n    let hookId = Hooks.on(\"midi-qol.preambleComplete\", attackCheck);\n    DAE.setFlag(tactor, \"proHook\", hookId);\n}",
        "folder": null,
        "sort": 0,
        "permission": {
          "default": 0
        },
        "flags": {}
      }
    },
    "exportSource": {
      "world": "dnd5e",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.3"
    }
  }
}