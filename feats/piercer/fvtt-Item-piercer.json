{
  "name": "Piercer",
  "type": "feat",
  "img": "icons/weapons/daggers/dagger-straight-thin-black.webp",
  "data": {
    "description": {
      "value": "<p>You have achieved a penetrating precision in combat, granting you the following benefits:</p>\n<ul>\n<li>Increase your Strength or Dexterity by 1, to a maximum of 20.</li>\n<li>Once per turn, when you hit a creature with an attack that deals piercing damage, you can re-roll one of the attackâ€™s damage dice, and you must use the new roll.</li>\n<li>When you score a critical hit that deals piercing damage to a creature, you can roll one additional damage die when determining the extra piercing damage the target takes.</li>\n</ul>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "",
      "cost": 0,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": null
    },
    "consume": {
      "type": "",
      "target": null,
      "amount": null
    },
    "ability": null,
    "actionType": "",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    },
    "attunement": 0
  },
  "effects": [
    {
      "_id": "59sleK0uupPk9E5g",
      "changes": [
        {
          "key": "flags.midi-qol.onUseMacroName",
          "mode": 0,
          "value": "ItemMacro.Piercer, preDamageRoll",
          "priority": "20"
        },
        {
          "key": "flags.midi-qol.onUseMacroName",
          "mode": 0,
          "value": "ItemMacro.Piercer, postDamageRoll",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "icons/weapons/daggers/dagger-straight-thin-black.webp",
      "label": "Piercer",
      "origin": "Item.ip9cF8kSRHYBtdRs",
      "transfer": true,
      "flags": {
        "dae": {
          "selfTarget": false,
          "stackable": "none",
          "durationExpression": "",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": true
        },
        "core": {
          "statusId": ""
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": [
        "flags.midi-qol.onUseMacroName",
        "flags.midi-qol.onUseMacroName"
      ]
    }
  ],
  "flags": {
    "scene-packer": {
      "hash": "56cc99a6b78b75e5eacf167caf1847a805f0a07d",
      "sourceId": "Item.IGihtCe3deww4D86"
    },
    "itemacro": {
      "macro": {
        "_id": null,
        "name": "Piercer",
        "type": "script",
        "author": "ckiTPzlaPztdkjV6",
        "img": "icons/svg/dice-target.svg",
        "scope": "global",
        "command": "// piercer\n\nasync function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }\nconst lastArg = args[args.length - 1];\nconst tokenOrActor = await fromUuid(lastArg.tokenUuid);\nconst tactor = tokenOrActor.actor ? tokenOrActor.actor : tokenOrActor;\n\nif (args[0].tag === \"OnUse\" && args[0].macroPass === \"preDamageRoll\") {\n    if (![\"mwak\",\"rwak\",\"msak\",\"rsak\"].includes(args[0].item.data.actionType) || args[0].itemData.data?.damage?.parts[0][1] !== \"piercing\" || !args[0]?.isCritical) return;\n    let effectData = [{\n        changes: [\n            { key: `flags.dnd5e.meleeCriticalDamageDice`, mode: CONST.ACTIVE_EFFECT_MODES.ADD, value: 1, priority: 20 },\n        ],\n        origin: args[0].uuid,\n        flags: {\n            \"dae\": { specialDuration: [\"1Attack\"] },\n        },\n        disabled: false,\n        label: \"Piercer Damage Bonus\"\n    }];\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: tactor.uuid, effects: effectData });\n}\n\nif (args[0].tag === \"OnUse\" && args[0].macroPass === \"postDamageRoll\") {\n    if (![\"mwak\",\"rwak\",\"msak\",\"rsak\"].includes(args[0].item.data.actionType) || args[0].itemData.data?.damage?.parts[0][1] !== \"piercing\") return;\n    if (game.combat) {\n        const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn / 100}`;\n        const lastTime = tactor.getFlag(\"midi-qol\", \"piercerTime\");\n        if (combatTime === lastTime) {\n            return;\n        }\n    }\n    await wait(100);\n    let workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid); \n    let diceResults = workflow.damageRoll.dice[0].results;\n    let die_content = \"\";\n    for (let i = 0; i < diceResults.length; i++) {\n        if (diceResults[i]?.rerolled) continue;\n        die_content += `<label class=\"radio-label\">\n        <input type=\"radio\" name=\"die\" value=\"${diceResults[i].result}\">\n        <img src=\"icons/svg/d${workflow.damageRoll.dice[0].faces}-grey.svg\" style=\"border:0px; width: 50px; height:50px;\">\n        ${diceResults[i].result}\n        </label>`;\n    };\n\n    let content = `\n        <style>\n        .dice .form-group {\n            display: flex;\n            flex-wrap: wrap;\n            width: 100%;\n            align-items: flex-start;\n        }\n\n        .dice .radio-label {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            text-align: center;\n            justify-items: center;\n            flex: 1 0 25%;\n            line-height: normal;\n        }\n\n        .dice .radio-label input {\n            display: none;\n        }\n\n        .dice img {\n            border: 0px;\n            width: 50px;\n            height: 50px;\n            flex: 0 0 50px;\n            cursor: pointer;\n        }\n\n        /* CHECKED STYLES */\n        .dice [type=radio]:checked + img {\n            outline: 2px solid #f00;\n        }\n        </style>\n        <form class=\"dice\">\n        <div class=\"form-group\" id=\"dice-group\">\n            ${die_content}\n        </div>\n        </form>\n    `;\n\n    let useReroll = await new Promise((resolve, reject) => {\n        new Dialog({\n            title: \"Piercer: Choose a damage die to reroll\",\n            content,\n            buttons: {\n                Ok: {\n                    label: \"Ok\",\n                    callback: async () => {resolve($(\"input[type='radio'][name='die']:checked\").val())},\n                },\n                Cancel: {\n                    label: \"Cancel\",\n                    callback: async () => {resolve(false)},\n                },\n            },\n            default: \"Cancel\",\n            close: () => {resolve(false)}\n        }).render(true);\n    });\n\n    if (!useReroll) return;\n\n    let newRoll = new Roll(`1d${workflow.damageRoll.dice[0].faces}`).evaluate({ async: false });\n\tif (game.dice3d) game.dice3d.showForRoll(newRoll);\n\n    let replaceDie = workflow.damageRoll.dice[0].results.find(i => i.result == useReroll);\n    let replaceResult = replaceDie.result;\n    if (replaceDie) {\n        replaceDie.result = newRoll.total;\n        workflow.damageRoll.total = workflow.damageRoll.total + newRoll.total - replaceResult;\n        workflow.damageRoll._total = workflow.damageRoll._total + newRoll.total - replaceResult;\n        workflow.damageRollHTML = await workflow.damageRoll.render();\n    }\n\n    if (game.combat) {\n        const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn / 100}`;\n        const lastTime = tactor.getFlag(\"midi-qol\", \"piercerTime\");\n        if (combatTime !== lastTime) {\n           await tactor.setFlag(\"midi-qol\", \"piercerTime\", combatTime)\n        }\n    }\n}",
        "folder": null,
        "sort": 0,
        "permission": {
          "default": 0
        },
        "flags": {}
      }
    },
    "core": {
      "sourceId": "Item.ip9cF8kSRHYBtdRs"
    },
    "exportSource": {
      "world": "dnd5e",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.3"
    }
  }
}