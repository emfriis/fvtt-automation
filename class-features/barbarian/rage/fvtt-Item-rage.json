{
  "name": "Rage",
  "type": "feat",
  "img": "systems/dnd5e/icons/skills/red_10.jpg",
  "data": {
    "description": {
      "value": "<p>In battle, you fight with primal ferocity. On your turn, you can enter a rage as a bonus action. While raging, you gain the following benefits if you aren't wearing heavy armor:</p>\n<ul>\n<li>\n<p>You have advantage on Strength checks and Strength saving throws.</p>\n</li>\n<li>\n<p>When you make a melee weapon attack using Strength, you gain a bonus to the damage roll that increases as you gain levels as a barbarian, as shown in the Rage Damage column of the Barbarian table.</p>\n</li>\n<li>\n<p>You have resistance to bludgeoning, piercing, and slashing damage.</p>\n</li>\n</ul>\n<p>If you are able to cast spells, you can't cast them or concentrate on them while raging. </p>\n<p>Your rage lasts for 1 minute. It ends early if you are knocked unconscious or if your turn ends and you haven't attacked a hostile creature since your last turn or taken damage since then. You can also end your rage on your turn as a bonus action. </p>\n<p>Once you have raged the number of times shown for your barbarian level in the Rages column in the table below, you must finish a long rest before you can rage again.</p>\n<p><em style=\"box-sizing:border-box;user-select:text;color:#191813;font-size:13px\">**Foundry note: Note the limited uses is set to the base default of 2. Please manually adjust as required.</em></p>\n<table style=\"width:286px;height:170px\" border=\"1\">\n<tbody>\n<tr style=\"height:17px\">\n<td style=\"width:112px;height:17px\"><strong>Barbarian Level</strong></td>\n<td style=\"width:68px;height:17px\"><strong>Rages</strong></td>\n<td style=\"width:96px;height:17px\"><strong>Rage Damage</strong></td>\n</tr>\n<tr style=\"height:17px\">\n<td style=\"width:112px;height:17px\">1st</td>\n<td style=\"width:68px;height:17px\">2</td>\n<td style=\"width:96px;height:17px\">+2</td>\n</tr>\n<tr style=\"height:17px\">\n<td style=\"width:112px;height:17px\">2nd</td>\n<td style=\"width:68px;height:17px\">2</td>\n<td style=\"width:96px;height:17px\">+2</td>\n</tr>\n<tr style=\"height:17px\">\n<td style=\"width:112px;height:17px\">3rd</td>\n<td style=\"width:68px;height:17px\">3</td>\n<td style=\"width:96px;height:17px\">+2</td>\n</tr>\n<tr style=\"height:17px\">\n<td style=\"width:112px;height:17px\">4th</td>\n<td style=\"width:68px;height:17px\">3</td>\n<td style=\"width:96px;height:17px\">+2</td>\n</tr>\n<tr style=\"height:17px\">\n<td style=\"width:112px;height:17px\">5th</td>\n<td style=\"width:68px;height:17px\">3</td>\n<td style=\"width:96px;height:17px\">+2</td>\n</tr>\n<tr style=\"height:17px\">\n<td style=\"width:112px;height:17px\">6th</td>\n<td style=\"width:68px;height:17px\">4</td>\n<td style=\"width:96px;height:17px\">+2</td>\n</tr>\n<tr style=\"height:17px\">\n<td style=\"width:112px;height:17px\">7th</td>\n<td style=\"width:68px;height:17px\">4</td>\n<td style=\"width:96px;height:17px\">+2</td>\n</tr>\n<tr>\n<td style=\"width:112px\">8th</td>\n<td style=\"width:68px\">4</td>\n<td style=\"width:96px\">+2</td>\n</tr>\n<tr>\n<td style=\"width:112px\">9th</td>\n<td style=\"width:68px\">4</td>\n<td style=\"width:96px\">+3</td>\n</tr>\n<tr>\n<td style=\"width:112px\">10th</td>\n<td style=\"width:68px\">4</td>\n<td style=\"width:96px\">+3</td>\n</tr>\n<tr>\n<td style=\"width:112px\">11th</td>\n<td style=\"width:68px\">4</td>\n<td style=\"width:96px\">+3</td>\n</tr>\n<tr>\n<td style=\"width:112px\">12th</td>\n<td style=\"width:68px\">5</td>\n<td style=\"width:96px\">+3</td>\n</tr>\n<tr>\n<td style=\"width:112px\">13th</td>\n<td style=\"width:68px\">5</td>\n<td style=\"width:96px\">+3</td>\n</tr>\n<tr>\n<td style=\"width:112px\">14th</td>\n<td style=\"width:68px\">5</td>\n<td style=\"width:96px\">+3</td>\n</tr>\n<tr style=\"height:17px\">\n<td style=\"width:112px;height:17px\">15th</td>\n<td style=\"width:68px;height:17px\">5</td>\n<td style=\"width:96px;height:17px\">+3</td>\n</tr>\n<tr style=\"height:17px\">\n<td style=\"width:112px;height:17px\">16th</td>\n<td style=\"width:68px;height:17px\">5</td>\n<td style=\"width:96px;height:17px\">+4</td>\n</tr>\n<tr>\n<td style=\"width:112px\">17th</td>\n<td style=\"width:68px\">6</td>\n<td style=\"width:96px\">+4</td>\n</tr>\n<tr>\n<td style=\"width:112px\">18th</td>\n<td style=\"width:68px\">6</td>\n<td style=\"width:96px\">+4</td>\n</tr>\n<tr style=\"height:17px\">\n<td style=\"width:112px;height:17px\">19th</td>\n<td style=\"width:68px;height:17px\">6</td>\n<td style=\"width:96px;height:17px\">+4</td>\n</tr>\n<tr style=\"height:17px\">\n<td style=\"width:112px;height:17px\">20th</td>\n<td style=\"width:68px;height:17px\">Unlimited</td>\n<td style=\"width:96px;height:17px\">+4</td>\n</tr>\n</tbody>\n</table>\n<p> </p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 48",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": null,
      "max": "@scale.barbarian.rages",
      "per": "lr",
      "type": "lr"
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": null,
    "damage": {
      "parts": [],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell",
      "value": ""
    },
    "requirements": "Barbarian 1",
    "recharge": {
      "value": null,
      "charged": false
    },
    "armor": {
      "value": 10
    },
    "hp": {
      "value": 0,
      "max": 0,
      "dt": null,
      "conditions": ""
    },
    "properties": {
      "amm": false,
      "fin": false,
      "fir": false,
      "foc": false,
      "hvy": false,
      "lgt": false,
      "lod": false,
      "rch": false,
      "rel": false,
      "ret": false,
      "spc": false,
      "thr": false,
      "two": false,
      "ver": false
    },
    "attunement": 0
  },
  "effects": [
    {
      "_id": "eWhL8hUr0c2ujDUm",
      "flags": {
        "dae": {
          "stackable": "none",
          "specialDuration": [],
          "macroRepeat": "endEveryTurn",
          "transfer": false,
          "selfTarget": false,
          "durationExpression": ""
        },
        "ActiveAuras": {
          "isAura": false,
          "ignoreSelf": false,
          "hidden": false,
          "height": false,
          "alignment": "",
          "type": "",
          "aura": "None",
          "radius": null,
          "save": "",
          "savedc": null,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        },
        "core": {
          "statusId": ""
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        }
      },
      "changes": [
        {
          "key": "data.traits.dr.value",
          "mode": 2,
          "value": "slashing",
          "priority": "20"
        },
        {
          "key": "data.traits.dr.value",
          "mode": 2,
          "value": "piercing",
          "priority": "20"
        },
        {
          "key": "data.traits.dr.value",
          "mode": 2,
          "value": "bludgeoning",
          "priority": "20"
        },
        {
          "key": "flags.midi-qol.advantage.ability.save.str",
          "mode": 0,
          "value": "1",
          "priority": "20"
        },
        {
          "key": "flags.midi-qol.advantage.ability.check.str",
          "mode": 0,
          "value": "1",
          "priority": "20"
        },
        {
          "key": "flags.dnd5e.DamageBonusMacro",
          "mode": 0,
          "value": "ItemMacro.Rage",
          "priority": "20"
        },
        {
          "key": "macro.itemMacro.GM",
          "mode": 0,
          "value": "",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "rounds": 10
      },
      "icon": "systems/dnd5e/icons/skills/red_10.jpg",
      "label": "Rage",
      "origin": "Actor.DMTSWfQs8whM5FtE.OwnedItem.3YrB0pvLXwJXGGt2",
      "tint": "",
      "transfer": false,
      "selectedKey": [
        "data.traits.dr.value",
        "data.traits.dr.value",
        "data.traits.dr.value",
        "flags.midi-qol.advantage.ability.save.str",
        "flags.midi-qol.advantage.ability.check.str",
        "flags.dnd5e.DamageBonusMacro",
        "macro.itemMacro.GM"
      ]
    }
  ],
  "flags": {
    "core": {
      "sourceId": "Item.C2lYHOGH2UpEifk7"
    },
    "exportSource": {
      "world": "Curse of Strahd",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.3"
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Rage",
          "type": "script",
          "author": "otqBqyqMuTGDffTr",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "// rage\n\nasync function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }\n\nconst lastArg = args[args.length - 1];\nconst tokenOrActor = await fromUuid(lastArg.actorUuid);\nconst tactor = tokenOrActor.actor ?? tokenOrActor;\nconst targetToken = await fromUuid(lastArg.tokenUuid);\n\nasync function cleanUp() {\n\tconst flag = await DAE.getFlag(tactor, \"rageHook\");\n\tif (flag) {\n\t\tHooks.off(\"midi-qol.RollComplete\", flag);\n\t\tawait DAE.unsetFlag(tactor, \"rageHook\");\n\t}\n\ttry {\n\t\tlet rage = await tactor.effects.find(i => i.data.label === \"Rage\");\n\t\tif (rage) await tactor.deleteEmbeddedDocuments(\"ActiveEffect\", [rage.id]);\n\t\tlet rageDamaged = await tactor.effects.find(i => i.data.label === \"Rage Damaged\");\n\t\tif (rageDamaged) await tactor.deleteEmbeddedDocuments(\"ActiveEffect\", [rageDamaged.id]);\n\t\tlet rageAttacked = await tactor.effects.find(i => i.data.label === \"Rage Attacked\");\n\t\tif (rageAttacked) await tactor.deleteEmbeddedDocuments(\"ActiveEffect\", [rageAttacked.id]);\n\t\tlet rageStart = await tactor.effects.find(i => i.data.label === \"Rage Start\");\n\t\tif (rageStart) await tactor.deleteEmbeddedDocuments(\"ActiveEffect\", [rageStart.id]);\n\t} catch (err) {\n\t\tconsole.error(`rage macro`, err);\n\t}\n}\n\nasync function damageCheck(workflow) {\n    await wait(1000);\n    let attackWorkflow = workflow.damageList.map((i) => ({ tokenId: i?.tokenId, hpDamage: i?.hpDamage })).filter(i => i.tokenId === lastArg.tokenId);\n    let lastAttack = attackWorkflow[attackWorkflow.length - 1];\n    if (lastAttack?.hpDamage > 0) {\n\t\tlet rageDamaged = tactor.effects.find(i => i.data.label === \"Rage Damaged\");\n\t\tif (rageDamaged) await tactor.deleteEmbeddedDocuments(\"ActiveEffect\", [rageDamaged.id]);\n        const effectData = {\n\t\t\tchanges: [\n\t\t\t\t{\n\t\t\t\t\tkey: \"flags.midi-qol.rageDamaged\", \n\t\t\t\t\tmode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, \n\t\t\t\t\tvalue: \"1\", \n\t\t\t\t\tpriority: 20\n\t\t\t\t},\n\t\t\t],\n\t\t\torigin: args[0].uuid,\n\t\t\tdisabled: false,\n\t\t\tduration: {rounds: 1, startTime: game.time.worldTime},\n\t\t\tlabel: \"Rage Damaged\",\n\t\t};\n\t\tawait tactor.createEmbeddedDocuments(\"ActiveEffect\", [effectData]);\n    }\n}\n\nif (args[0] == \"on\" || args[0] == \"each\" && args[0].tag != \"DamageBonus\") {\n\t\n\tif (!tactor.effects.find(i => i.data.label == \"Rage Start\")) {\n\t\tconst effectData = {\n\t\t\tchanges: [\n\t\t\t\t{\n\t\t\t\t\tkey: \"flags.midi-qol.rageStart\", \n\t\t\t\t\tmode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, \n\t\t\t\t\tvalue: \"1\", \n\t\t\t\t\tpriority: 20\n\t\t\t\t},\n\t\t\t],\n\t\t\torigin: args[0].uuid,\n\t\t\tdisabled: false,\n\t\t\tlabel: \"Rage Start\",\n\t\t};\n\t\tawait tactor.createEmbeddedDocuments(\"ActiveEffect\", [effectData]);\n\t\tconst effectData2 = {\n\t\t\tchanges: [\n\t\t\t\t{\n\t\t\t\t\tkey: \"flags.midi-qol.rageAttacked\", \n\t\t\t\t\tmode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, \n\t\t\t\t\tvalue: \"1\", \n\t\t\t\t\tpriority: 20\n\t\t\t\t},\n\t\t\t],\n\t\t\torigin: args[0].uuid,\n\t\t\tdisabled: false,\n\t\t\tduration: {rounds: 1, startTime: game.time.worldTime},\n\t\t\tlabel: \"Rage Attacked\",\n\t\t};\n\t\tawait tactor.createEmbeddedDocuments(\"ActiveEffect\", [effectData2]);\t\n\t} else {\n\t\tif (!(tactor.effects.find(i => i.data.label == \"Rage Damaged\")) && !(tactor.effects.find(i => i.data.label == \"Rage Attacked\"))) {\n\t\t\tawait cleanUp();\n\t\t}\n\t}\n\tlet hookId = Hooks.on(\"midi-qol.RollComplete\", damageCheck);\n    DAE.setFlag(tactor, \"rageHook\", hookId);\n}\n\nif (args[0].tag == \"DamageBonus\") {\n\t\n\tif ([\"mwak\", \"rwak\", \"msak\", \"rsak\"].includes(lastArg.itemData.data.actionType)) {\n\t\tlet rageAttacked = tactor.effects.find(i => i.data.label === \"Rage Attacked\");\n\t\tif (rageAttacked) await tactor.deleteEmbeddedDocuments(\"ActiveEffect\", [rageAttacked.id]);\n\t\tconst effectData = {\n\t\t\tchanges: [\n\t\t\t\t{\n\t\t\t\t\tkey: \"flags.midi-qol.rageAttacked\", \n\t\t\t\t\tmode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, \n\t\t\t\t\tvalue: \"1\", \n\t\t\t\t\tpriority: 20\n\t\t\t\t},\n\t\t\t],\n\t\t\torigin: args[0].uuid,\n\t\t\tdisabled: false,\n\t\t\tduration: {rounds: 1, startTime: game.time.worldTime},\n\t\t\tlabel: \"Rage Attacked\",\n\t\t};\n\t\tawait tactor.createEmbeddedDocuments(\"ActiveEffect\", [effectData]);\n\t}\n\n    const levels = lastArg.rollData.classes?.barbarian?.levels ?? 0;\n    if (!levels) return {};\n    if (!lastArg.item) return {};\n    const titem = tactor.items.get(lastArg.item._id);\n    const rollMod = titem.abilityMod;\n    if (rollMod !== \"str\" || ![\"mwak\"].includes(lastArg.itemData.data.actionType)) return {};\n    const bonus = levels < 9 ? \"2\" : (levels < 16 ? \"3\" : \"4\");\n    return {damageRoll: bonus, flavor: \"Rage Damage\"};\n} \n\nif (args[0] === \"off\") {\n\tawait cleanUp();\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "favtab": {
      "isFavorite": false
    },
    "cf": {
      "id": "temp_ovon30cu8t",
      "color": "#000000"
    },
    "rest-recovery": {
      "data": {
        "recovery": {
          "enabled": false
        }
      }
    },
    "link-item-resource-5e": {
      "resource-link": ""
    },
    "scene-packer": {
      "hash": "633dfd74155de322f3994de92b2653fb4e3c7727",
      "sourceId": "Item.iSJC1kNnvYiPmjCt"
    }
  }
}