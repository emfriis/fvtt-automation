{
  "name": "Divine Smite",
  "type": "feat",
  "img": "icons/weapons/hammers/hammer-double-glowing-yellow.webp",
  "data": {
    "description": {
      "value": "<p>Starting at 2nd level, when you hit a creature with a melee weapon attack, you can expend one spell slot to deal radiant damage to the target, in addition to the weaponâ€™s damage. The extra damage is 2d8 for a 1st-level spell slot, plus 1d8 for each spell level higher than 1st, to a maximum of 5d8. The damage increases by 1d8 if the target is an undead or a fiend, to a maximum of 6d8.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB",
    "activation": {
      "type": "",
      "cost": null,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": null
    },
    "consume": {
      "type": "",
      "target": null,
      "amount": null
    },
    "ability": null,
    "actionType": "",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "Paladin 2",
    "recharge": {
      "value": null,
      "charged": false
    },
    "attunement": 0
  },
  "effects": [
    {
      "_id": "t38CXIE8zqT9hXVS",
      "changes": [
        {
          "key": "flags.dnd5e.DamageBonusMacro",
          "mode": 0,
          "value": "ItemMacro.Divine Smite",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "icons/weapons/hammers/hammer-double-glowing-yellow.webp",
      "label": "Divine Smite",
      "origin": "Item.v6wagYvDWb3dR9qx",
      "transfer": true,
      "flags": {
        "dae": {
          "selfTarget": false,
          "stackable": "none",
          "durationExpression": "",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": true
        },
        "core": {
          "statusId": ""
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": "flags.dnd5e.DamageBonusMacro"
    }
  ],
  "flags": {
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Divine Smite",
          "type": "script",
          "author": "otqBqyqMuTGDffTr",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "// divine smite\n// requires MIDI-QOL\n\ntry {\n\n    if (![\"mwak\"].includes(args[0].itemData.data.actionType)) return {}; // melee weapon attack\n    if (args[0].hitTargets.length < 1) return {};\n    token = canvas.tokens.get(args[0].tokenId);\n    actor = token.actor;\n    if (!actor || !token || args[0].hitTargets.length < 1) return {};\n    let target = canvas.tokens.get(args[0].hitTargets[0].id ?? args[0].hitTargets[0]._id);\n    if (!target) console.error(\"No target for Divine Smite found\");\n    \n    // Get options for available slots\n     let optionsText = \"\";\n    let i = 1;\n    for (; i < 9; i++) {\n      const slots = getSpellSlots(actor, i, false);\n        if (slots.value > 0) {\n          const level = CONFIG.DND5E.spellLevels[i];\n          const label = game.i18n.format('DND5E.SpellLevelSlot', {level: level, n: slots.value});\n          optionsText += `<option value=\"${i}\">${label}</option>`;\n        }\n    }\n      \n    // Check for Pact slot\n    const slots = getSpellSlots(actor, 0, true);\n    if(slots.value > 0) {\n    i++;\n      const level = CONFIG.DND5E.spellLevels[slots.level];\n      const label = game.i18n.format('DND5E.SpellLevelSlot', {level: level, n: slots.value}) + ' (Pact)';\n      optionsText += `<option value=\"${i}\">${label}</option>`;\n    }\n      \n    if (optionsText != \"\") {\n  \n      let dialog = new Promise((resolve, reject) => {\n          // Create a dialogue box to select spell slot level to use when smiting.\n          new Dialog({\n              title: \"Divine Smite: Usage Configuration\",\n              content: `\n              <form id=\"smite-use-form\">\n                  <p>` + game.i18n.format(\"DND5E.AbilityUseHint\", {name: \"Divine Smite\", type: \"feature\"}) + `</p>\n                  <div class=\"form-group\">\n                      <label>Spell Slot Level</label>\n                      <div class=\"form-fields\">\n                          <select id=\"slot\" name=\"slot-level\">` + optionsText + `</select>\n                      </div>\n                  </div>\n                  <div class=\"form-group\">\n                      <label class=\"checkbox\">\n                      <input id=\"consume\" type=\"checkbox\" name=\"consumeCheckbox\" checked/>` + game.i18n.localize(\"DND5E.SpellCastConsume\") + `</label>\n                  </div>\n              </form>\n              `,\n              buttons: {\n                  one: {\n                      icon: '<i class=\"fas fa-check\"></i>',\n                      label: \"Smite\",\n                      callback: () => resolve([parseInt(Array.from((document.getElementById(\"slot\")).options[(document.getElementById(\"slot\")).selectedIndex].text)[0]), $('#consume').is(\":checked\"), ((document.getElementById(\"slot\")).options[(document.getElementById(\"slot\")).selectedIndex].text)])\n                  },\n                  two: {\n                      icon: '<i class=\"fas fa-times\"></i>',\n                      label: \"Cancel\",\n                      callback: () => {resolve(false)}\n                  }\n              },\n              default: \"two\",\n              close: () => {resolve(false)}\n          }).render(true);\n      });\n      smite = await dialog;\n      \n      if (!smite) return {}\n      \n      let slotLevel = smite[0];\n      let consumeSlot = smite[1];\n      let pactSlot = (smite[2].slice(smite[2].length - 6) == \"(Pact)\") ? true : false;\n      \n      let chosenSpellSlots = getSpellSlots(actor, slotLevel, pactSlot);\n      if (chosenSpellSlots.value < 1 && consumeSlot) {\n          ui.notifications.warn(\"Divine Smite: No Slots of Selected Level Remaining\");\n          return {};\n      }\n      \n      if (consumeSlot) {\n          \n          let objUpdate = new Object();\n          if (!pactSlot) {\n              objUpdate['data.spells.spell' + slotLevel + '.value'] = chosenSpellSlots.value - 1;\n                  }\n          else {\n              objUpdate['data.spells.pact.value'] = chosenSpellSlots.value - 1;\n          }\n          actor.update(objUpdate);\n      }\n      \n      let diceMult = args[0].isCritical ? 2: 1;\n      let numDice = 1 + slotLevel;\n      if (numDice > 5) numDice = 5;\n      let smiteType = [\"fiend\", \"fiend (shapechanger)\", \"undead\", \"undead (shapechanger)\"].some(type => (target?.actor.data.data.details.type?.value || \"\").toLowerCase().includes(type));\n      if (smiteType) numDice += 1;\n      \n      return {damageRoll: `${numDice * diceMult}d8[radiant]`, flavor: \"Divine Smite\"};\n    }\n  } catch (err) {\n      console.error(`${args[0].itemData.name} - Divine Smite macro`, err);\n  }\n  \n  function getSpellSlots(actor, level, isPact) {\n    if(isPact == false) {\n      return actor.data.data.spells[`spell${level}`];\n    }\n    else {\n      return actor.data.data.spells.pact;\n    }\n  }",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "Curse of Strahd",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.3"
    },
    "core": {
      "sourceId": "Item.DROA8kUFjNICzoKH"
    },
    "scene-packer": {
      "hash": "b640817f4fc82dcfe91f285d19d32cdb011d437d",
      "sourceId": "Item.Ot9TSW4RAcA4hNq6"
    }
  }
}