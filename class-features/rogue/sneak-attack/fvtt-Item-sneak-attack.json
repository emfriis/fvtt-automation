{
  "name": "Sneak Attack",
  "type": "feat",
  "img": "systems/dnd5e/icons/skills/violet_27.jpg",
  "data": {
    "description": {
      "value": "<p>Beginning at 1st level, you know how to strike subtly and exploit a foe's distraction. Once per turn, you can deal an extra [[/r 1d6]] damage to one creature you hit with an attack if you have advantage on the attack roll. The attack must use a finesse or a ranged weapon.</p>\n<p>You don't need advantage on the attack roll if another enemy of the target is within 5 feet of it, that enemy isn'tÂ <a href=\"https://5e.tools/conditionsdiseases.html#incapacitated_phb\">incapacitated</a>, and you don't have disadvantage on the attack roll.</p>\n<p>The amount of the extra damage increases as you gain levels in this class, as shown in the Sneak Attack column of the Rogue table.</p>\n<p>Updated 0.8.97 for v9</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB",
    "activation": {
      "type": "",
      "cost": null,
      "condition": ""
    },
    "duration": {
      "value": 24,
      "units": "hour"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": null,
    "actionType": "",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": null,
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "Rogue 1",
    "recharge": {
      "value": null,
      "charged": false
    },
    "armor": {
      "value": 10
    },
    "hp": {
      "value": 0,
      "max": 0,
      "dt": null,
      "conditions": ""
    },
    "properties": {},
    "attributes": {
      "spelldc": 10
    }
  },
  "effects": [
    {
      "_id": "Ns5pHr7gcYPTJ7HU",
      "flags": {
        "dae": {
          "stackable": false,
          "transfer": true,
          "specialDuration": [],
          "macroRepeat": "none"
        },
        "ActiveAuras": {
          "isAura": false,
          "ignoreSelf": false,
          "hidden": false,
          "height": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "save": "",
          "savedc": null
        }
      },
      "changes": [
        {
          "key": "flags.dnd5e.DamageBonusMacro",
          "mode": 0,
          "value": "ItemMacro.Sneak Attack",
          "priority": "30"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "systems/dnd5e/icons/skills/violet_27.jpg",
      "label": "Sneak Attack",
      "origin": "Actor.DMTSWfQs8whM5FtE.OwnedItem.Phll73Y1o1t6Park",
      "tint": null,
      "transfer": true,
      "selectedKey": "flags.dnd5e.DamageBonusMacro"
    }
  ],
  "flags": {
    "dae": {
      "activeEquipped": false,
      "alwaysActive": false
    },
    "exportSource": {
      "world": "dnd5e",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.3"
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Sneak Attack",
          "type": "script",
          "author": "otqBqyqMuTGDffTr",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const version = \"0.9.52\"\ntry {\n    if (![\"mwak\",\"rwak\"].includes(args[0].itemData.data.actionType)) return {}; // weapon attack\n    if (args[0].itemData.data.actionType === \"mwak\" && !args[0].itemData.data.properties?.fin) \n      return {}; // ranged or finesse\n    if (args[0].hitTargets.length < 1) return {};\n    token = canvas.tokens.get(args[0].tokenId);\n    actor = token.actor;\n    if (!actor || !token || args[0].hitTargets.length < 1) return {};\n    const rogueLevels = actor.getRollData().classes.rogue?.levels;\n    if (!rogueLevels) {\n      MidiQOL.warn(\"Sneak Attack Damage: Trying to do sneak attack and not a rogue\");\n      return {}; // rogue only\n    }\n    let target = canvas.tokens.get(args[0].hitTargets[0].id ?? args[0].hitTargers[0]._id);\n    if (!target) MidiQOL.error(\"Sneak attack macro failed\");\n    \n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime === lastTime) {\n       MidiQOL.warn(\"Sneak Attack Damage: Already done a sneak attack this turn\");\n       return {};\n      }\n    }\n    let foundEnemy = true;\n    let isSneak = args[0].advantage;\n    \n    if (!isSneak) {\n      foundEnemy = false;\n      let nearbyEnemy = canvas.tokens.placeables.filter(t => {\n        let nearby = (t.actor &&\n             t.actor?.uuid !== args[0].actorUuid && // not me\n             t.id !== target.id && // not the target\n             t.actor?.data.data.attributes?.hp?.value > 0 && // not dead or unconscious\n\t\t\t !t.actor.effects.find(i => i.data.label === \"Incapacitated\") && // not incapacitated\n             t.data.disposition !== target.data.disposition && // not an ally\n             MidiQOL.getDistance(t, target, false) <= 5 // close to the target\n         );\n        foundEnemy = foundEnemy || (nearby && t.data.disposition === -target.data.disposition)\n        return nearby;\n      });\n      isSneak = nearbyEnemy.length > 0;\n    }\n    if (!isSneak) {\n      MidiQOL.warn(\"Sneak Attack Damage: No advantage/ally next to target\");\n      return {};\n    }\n    let useSneak = getProperty(actor.data, \"flags.dae.autoSneak\");\n    if (!useSneak) {\n        let dialog = new Promise((resolve, reject) => {\n          new Dialog({\n          // localize this text\n          title: \"Conditional Damage\",\n          content: `<p>Use Sneak attack?</p>`+(!foundEnemy ? \"<p>Only Neutral creatures nearby</p>\" : \"\"),\n          buttons: {\n              one: {\n                  icon: '<i class=\"fas fa-check\"></i>',\n                  label: \"Confirm\",\n                  callback: () => resolve(true)\n              },\n              two: {\n                  icon: '<i class=\"fas fa-times\"></i>',\n                  label: \"Cancel\",\n                  callback: () => {resolve(false)}\n              }\n          },\n          default: \"two\",\n\t\t  close: callBack => {resolve(false)}\n          }).render(true);\n        });\n        useSneak = await dialog;\n    }\n    if (!useSneak) return {}\n    const diceMult = args[0].isCritical ? 2: 1;\n    const baseDice = Math.ceil(rogueLevels/2);\n\tconst damageType = args[0].item.data.damage.parts[0][1];\n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime !== lastTime) {\n         await actor.setFlag(\"midi-qol\", \"sneakAttackTime\", combatTime)\n      }\n    }\n    // How to check that we've already done one this turn?\n    return {damageRoll: `${baseDice * diceMult}d6[${damageType}]`, flavor: \"Sneak Attack\"};\n} catch (err) {\n    console.error(`${args[0].itemData.name} - Sneak Attack ${version}`, err);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        },
        "_id": null,
        "name": "Sneak Attack",
        "type": "script",
        "author": "ckiTPzlaPztdkjV6",
        "img": "icons/svg/dice-target.svg",
        "scope": "global",
        "command": "// sneak attack\n// requires MIDI-QOL\n\ntry {\n    if (![\"mwak\",\"rwak\"].includes(args[0].itemData.data.actionType)) return {}; // weapon attack\n    if (args[0].itemData.data.actionType === \"mwak\" && !args[0].itemData.data.properties?.fin) \n      return {}; // ranged or finesse\n    if (args[0].hitTargets.length < 1) return {};\n    token = canvas.tokens.get(args[0].tokenId);\n    actor = token.actor;\n    if (!actor || !token || args[0].hitTargets.length < 1) return {};\n    const rogueLevels = actor.getRollData().classes.rogue?.levels;\n    if (!rogueLevels) {\n      MidiQOL.warn(\"Sneak Attack Damage: Trying to do sneak attack and not a rogue\");\n      return {}; // rogue only\n    }\n    let target = canvas.tokens.get(args[0].hitTargets[0].id ?? args[0].hitTargers[0]._id);\n    if (!target) MidiQOL.error(\"Sneak attack macro failed\");\n    \n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime === lastTime) {\n       MidiQOL.warn(\"Sneak Attack Damage: Already done a sneak attack this turn\");\n       return {};\n      }\n    }\n    let foundEnemy = true;\n    let isSneak = args[0].advantage;\n    \n    if (!isSneak) {\n      foundEnemy = false;\n      let nearbyEnemy = canvas.tokens.placeables.filter(t => {\n        let nearby = (t.actor &&\n             t.actor?.uuid !== args[0].actorUuid && // not me\n             t.id !== target.id && // not the target\n             t.actor?.data.data.attributes?.hp?.value > 0 && // not dead or unconscious\n\t\t\t !t.actor.effects.find(i => i.data.label === \"Incapacitated\") && // not incapacitated\n             t.data.disposition !== target.data.disposition && // not an ally\n             MidiQOL.getDistance(t, target, false) <= 5 // close to the target\n         );\n        foundEnemy = foundEnemy || (nearby && t.data.disposition === -target.data.disposition)\n        return nearby;\n      });\n      isSneak = nearbyEnemy.length > 0;\n    }\n    if (!isSneak) {\n      MidiQOL.warn(\"Sneak Attack Damage: No advantage/ally next to target\");\n      return {};\n    }\n    let useSneak = getProperty(actor.data, \"flags.dae.autoSneak\");\n    if (!useSneak) {\n        let dialog = new Promise((resolve, reject) => {\n          new Dialog({\n          // localize this text\n          title: \"Conditional Damage\",\n          content: `<p>Use Sneak attack?</p>`+(!foundEnemy ? \"<p>Only Neutral creatures nearby</p>\" : \"\"),\n          buttons: {\n              one: {\n                  icon: '<i class=\"fas fa-check\"></i>',\n                  label: \"Confirm\",\n                  callback: () => resolve(true)\n              },\n              two: {\n                  icon: '<i class=\"fas fa-times\"></i>',\n                  label: \"Cancel\",\n                  callback: () => {resolve(false)}\n              }\n          },\n          default: \"two\",\n\t\t  close: callBack => {resolve(false)}\n          }).render(true);\n        });\n        useSneak = await dialog;\n    }\n    if (!useSneak) return {}\n    const diceMult = args[0].isCritical ? 2: 1;\n    const baseDice = Math.ceil(rogueLevels/2);\n\tconst damageType = args[0].item.data.damage.parts[0][1];\n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime !== lastTime) {\n         await actor.setFlag(\"midi-qol\", \"sneakAttackTime\", combatTime)\n      }\n    }\n    return {damageRoll: `${baseDice * diceMult}d6[${damageType}]`, flavor: \"Sneak Attack\"};\n} catch (err) {\n    console.error(`${args[0].itemData.name} - Sneak Attack}`, err);\n}",
        "folder": null,
        "sort": 0,
        "permission": {
          "default": 0
        },
        "flags": {}
      }
    },
    "betterRolls5e": {
      "critRange": {
        "value": null
      },
      "critDamage": {
        "value": ""
      },
      "quickDesc": {
        "value": true,
        "altValue": true
      },
      "quickProperties": {
        "value": true,
        "altValue": true
      },
      "quickOther": {
        "value": true,
        "altValue": true
      },
      "quickFlavor": {
        "value": true,
        "altValue": true
      }
    },
    "core": {
      "sourceId": "Item.bhuz5hzr0YsHJd1N"
    },
    "favtab": {
      "isFavorite": false
    },
    "autoanimations": {
      "killAnim": false,
      "override": false,
      "animType": "t1",
      "animName": "",
      "hmAnim": "a1",
      "color": "a1",
      "dtvar": "dt1",
      "explosion": false,
      "explodeVariant": "ev1",
      "explodeColor": "",
      "explodeRadius": "0",
      "explodeLoop": "1",
      "selfRadius": "5",
      "animTint": "#ffffff",
      "auraOpacity": 0.75,
      "ctaOption": false,
      "animLevel": false,
      "bards": {
        "bardAnim": "a1",
        "bardTarget": true,
        "bardTargetAnim": "a1",
        "bardTargetColor": "a1",
        "bardSelf": true,
        "marker": true,
        "markerColor": "a1",
        "markerColorTarget": "a1"
      },
      "spellVar": "a1",
      "rangedOptions": {
        "rangeDmgType": ""
      },
      "spellOptions": {
        "spellLoops": 1
      },
      "uaStrikeType": "physical",
      "divineSmite": {
        "dsEnable": false,
        "dsSelf": true,
        "dsSelfDelay": 0,
        "dsSelfColor": "a1",
        "dsTarget": true,
        "dsTargetDelay": 1250,
        "dsTargetColor": "a1"
      },
      "exAnimLevel": false,
      "impactVar": "a1",
      "allSounds": {
        "explosion": {
          "audioExplodeEnabled": false,
          "file": "",
          "delay": 100,
          "volume": 0.25
        },
        "item": {
          "enableAudio": false,
          "file": "",
          "delay": 100,
          "volume": 0.25
        }
      },
      "teleDist": 30,
      "templates": {
        "tempType": "a1",
        "tempAnim": "",
        "tempColor": "",
        "tempLoop": 1,
        "customAnim": false,
        "customPath": ""
      }
    },
    "cf": {
      "id": "temp_ovon30cu8t",
      "color": "#000000"
    },
    "scene-packer": {
      "sourceId": "Item.ZCQX9FwC8UAep0yA"
    }
  }
}