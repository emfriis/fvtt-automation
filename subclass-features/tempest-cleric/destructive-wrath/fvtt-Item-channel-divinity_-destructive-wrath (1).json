{
  "name": "Channel Divinity: Destructive Wrath",
  "type": "feat",
  "img": "systems/dnd5e/icons/spells/lighting-fire-3.jpg",
  "data": {
    "description": {
      "value": "You can use Channel Divinity to deal maximum damage instead of rolling for lightning or thunder damage.\n<details>\n  <summary>\n    More Details\n  </summary>\n  <p>\n    </p><p>Starting at 2nd level, you can use your Channel Divinity to wield the power of the storm with unchecked ferocity.</p>\n<p>When you roll lightning or thunder damage, you can use your Channel Divinity to deal maximum damage, instead of rolling.</p>\n  <p></p>\n</details>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "special",
      "cost": null,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    },
    "attunement": null
  },
  "effects": [
    {
      "_id": "NwgN8drtyfHsfFGp",
      "changes": [
        {
          "key": "flags.midi-qol.onUseMacroName",
          "mode": 0,
          "value": "ItemMacro.Channel Divinity: Destructive Wrath, postDamageRoll",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "systems/dnd5e/icons/spells/lighting-fire-3.jpg",
      "label": "Channel Divinity: Destructive Wrath",
      "origin": "Item.DdO6b9ZZhB6Q0Fgw",
      "transfer": true,
      "flags": {
        "dae": {
          "selfTarget": false,
          "stackable": "none",
          "durationExpression": "",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": true
        },
        "core": {
          "statusId": ""
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": "flags.midi-qol.onUseMacroName"
    }
  ],
  "flags": {
    "ddbimporter": {
      "id": "66691",
      "entityTypeId": "222216831",
      "componentId": 150,
      "componentTypeId": 12168134,
      "class": "Cleric",
      "subclass": "Tempest Domain",
      "dndbeyond": {
        "levelScale": null,
        "levelScales": [],
        "limitedUse": [
          {
            "level": null,
            "uses": 1
          }
        ]
      },
      "importId": "pd5q290isltnqno1"
    },
    "infusions": {
      "infused": false
    },
    "obsidian": {
      "source": {
        "type": "class",
        "text": "Cleric"
      }
    },
    "scene-packer": {
      "hash": "9beee214adcdff2b8236c77964323bbe69b03c14",
      "sourceId": "Item.F9btJcU4TkmFMJYs"
    },
    "rest-recovery": {
      "data": {
        "recovery": {
          "enabled": false
        }
      }
    },
    "midi-qol": {
      "effectActivation": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "_id": null,
        "name": "Channel Divinity: Destructive Wrath",
        "type": "script",
        "author": "ckiTPzlaPztdkjV6",
        "img": "icons/svg/dice-target.svg",
        "scope": "global",
        "command": "// destructive wrath\n\nconst tokenOrActor = await fromUuid(args[0].actorUuid);\nconst tactor = tokenOrActor.actor ?? tokenOrActor;\n\nif (args[0].tag === \"OnUse\" && args[0].hitTargets.length > 0) {\n    const resourceList = [{ name: \"primary\" }, { name: \"secondary\" }, { name: \"tertiary\" }];\n    const resourceValues = Object.values(tactor.data.data.resources);\n    const resourceTable = mergeObject(resourceList, resourceValues);\n    const abilityName = \"Channel Divinity\";\n    const findResourceSlot = resourceTable.find(i => i.label.toLowerCase() === abilityName.toLowerCase());\n    if (!findResourceSlot) return ui.notifications.error(`<strong>REQUIRED</strong>: Please add \"<strong>${abilityName}</strong>\" as one of your <strong>Resources</strong>.`);\n    if (findResourceSlot.value < 1) return;\n    const resourceSlot = findResourceSlot.name;\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    if (!([\"lightning\", \"thunder\"].some(type => type === workflow.item.data.data.damage.parts[0][1].toLowerCase()))) return;\n    let useFeat = await new Promise((resolve, reject) => {\n        new Dialog({\n            title: \"Channel Divinity: Destructive Wrath\",\n            content: \"Use Feature?\",\n            buttons: {\n                Confirm: {\n                    label: \"Confirm\",\n                    callback: async () => {resolve(true)},\n                },\n                Cancel: {\n                    label: \"Cancel\",\n                    callback: async () => {resolve(false)},\n                },\n            },\n            default: \"Cancel\",\n            close: () => {resolve(false)}\n        }).render(true);\n    });\n    if (!useFeat) return;\n\n    let damageFormula = workflow.damageRoll.formula;\n    let newDamageFormula = damageFormula.replace(/\\d+d\\d+/g, (i) => {\n        let die = parseInt(i.match(/^(\\d+)/));\n        let faces = parseInt(i.match(/(\\d+)+$/));\n        return `${die * faces}`;\n    });\n    workflow.damageRoll = await new Roll(newDamageFormula).roll();\n    workflow.damageTotal = workflow.damageRoll.total;\n    workflow.damageRollHTML = await workflow.damageRoll.render();\n\n    let actor_data = duplicate(tactor.data._source);\n    actor_data.data.resources[resourceSlot].value = Math.max(0, actor_data.data.resources[resourceSlot].value - 1);\n    await tactor.update(actor_data);\n}",
        "folder": null,
        "sort": 0,
        "permission": {
          "default": 0
        },
        "flags": {}
      }
    },
    "core": {
      "sourceId": "Item.DdO6b9ZZhB6Q0Fgw"
    },
    "exportSource": {
      "world": "dnd5e",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.3"
    }
  }
}