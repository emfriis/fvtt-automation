{
  "name": "Hold Person",
  "type": "spell",
  "img": "systems/dnd5e/icons/spells/shielding-eerie-2.jpg",
  "data": {
    "description": {
      "value": "<p>Choose a humanoid that you can see within range. The target must succeed on a Wisdom saving throw or be @Compendium[dnd5e.rules.Paralyzed]{paralyzed} for the duration. At the end of each of its turns, the target can make another Wisdom saving throw. On a success, the spell ends on the target.</p>\n<p><strong>At Higher Levels.</strong> When you cast this spell using a spell slot of 3rd level or higher, you can target one additional humanoid for each slot level above 2nd. The humanoids must be within 30 feet of each other when you target them.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Basic Rules, Player's Handbook pg 251",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": "\"@raceOrType\".includes(\"humanoid\")"
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 60,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "wis",
      "dc": null,
      "scaling": "spell"
    },
    "level": 2,
    "school": "enc",
    "components": {
      "value": "a small, straight piece of iron",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "a small, straight piece of iron",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    }
  },
  "effects": [
    {
      "label": "Hold Person",
      "icon": "systems/dnd5e/icons/spells/shielding-eerie-2.jpg",
      "changes": [
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "",
          "priority": "20"
        },
        {
          "key": "flags.midi-qol.fail.ability.save.dex",
          "mode": 0,
          "value": "1",
          "priority": "20"
        },
        {
          "key": "flags.midi-qol.fail.ability.save.str",
          "mode": 0,
          "value": "1",
          "priority": "20"
        },
        {
          "key": "flags.midi-qol.grants.advantage.attack.all",
          "mode": 0,
          "value": "1",
          "priority": "20"
        },
        {
          "key": "flags.midi-qol.grants.critical.range",
          "mode": 5,
          "value": "5",
          "priority": "20"
        },
        {
          "key": "data.attributes.movement.all",
          "mode": 0,
          "value": "0",
          "priority": "20"
        },
        {
          "key": "StatusEffect",
          "mode": 0,
          "value": "Convenient Effect: Incapacitated",
          "priority": "20"
        }
      ],
      "duration": {
        "startTime": null
      },
      "tint": "",
      "transfer": false,
      "disabled": false,
      "flags": {
        "dae": {
          "transfer": false,
          "stackable": "none",
          "selfTarget": false,
          "durationExpression": "",
          "macroRepeat": "none",
          "specialDuration": []
        },
        "ddbimporter": {
          "disabled": false
        },
        "midi-qol": {
          "forceCEOff": true
        },
        "core": {
          "statusId": "systems/dnd5e/icons/spells/shielding-eerie-2.jpg"
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "_id": "h8cb0sa2q7hn96e6",
      "selectedKey": [
        "macro.itemMacro",
        "flags.midi-qol.fail.ability.save.dex",
        "flags.midi-qol.fail.ability.save.str",
        "flags.midi-qol.grants.advantage.attack.all",
        "flags.midi-qol.grants.critical.range",
        "data.attributes.movement.all",
        "StatusEffect"
      ]
    }
  ],
  "flags": {
    "ddbimporter": {
      "id": 138145,
      "definitionId": 2147,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "originalName": "Hold Person",
      "sources": [
        {
          "sourceId": 1,
          "pageNumber": null,
          "sourceType": 2
        },
        {
          "sourceId": 2,
          "pageNumber": 251,
          "sourceType": 1
        }
      ],
      "tags": [
        "Control"
      ],
      "version": "2.9.59",
      "effectsApplied": true
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "dae": {
      "activeEquipped": false,
      "alwaysActive": false
    },
    "midi-qol": {
      "onUseMacroName": "[preSave]ItemMacro",
      "effectActivation": true,
      "forceCEOff": false,
      "forceCEOn": false
    },
    "rest-recovery": {
      "data": {
        "recovery": {
          "enabled": false
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "core": {
      "sourceId": "Compendium.world.ddb-spells.JcgbHCNDTv6uoGZG"
    },
    "scene-packer": {
      "sourceId": "Item.fpxrAxviRfPC67QI",
      "hash": "2499a9ddd10ad28f2ad7c626f155926ab10fd43e"
    },
    "exportSource": {
      "world": "dnd5e",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.3"
    },
    "itemacro": {
      "macro": {
        "_id": null,
        "name": "Hold Person",
        "type": "script",
        "author": "ckiTPzlaPztdkjV6",
        "img": "icons/svg/dice-target.svg",
        "scope": "global",
        "command": "const lastArg = args[args.length - 1];\n\nasync function attemptRemoval(targetToken, condition, item, getResist) {\n    const caster = item.parent;\n    const saveDc = caster.data.data.attributes.spelldc;\n    const removalCheck = false;\n    const ability = \"wis\";\n    const type = removalCheck ? \"abil\" : \"save\"; // can be \"abil\", \"save\", or \"skill\"\n    const targetUuid = targetToken.actor.uuid;\n    const rollOptions = getResist ? { chatMessage: true, fastForward: true, advantage: true } : { chatMessage: true, fastForward: true };\n    const roll = await MidiQOL.socket().executeAsGM(\"rollAbility\", { request: type, targetUuid: targetUuid, ability: ability, options: rollOptions });\n    if (game.dice3d) game.dice3d.showForRoll(roll);\n\n    if (roll.total >= saveDc) {\n        let para = tactor.effects.find(i => i.data === lastArg.efData);\n\t\tif (para) await tactor.deleteEmbeddedDocuments(\"ActiveEffect\", [para.id]);\n    } else {\n        if (roll.total < saveDc) ChatMessage.create({ content: `${targetToken.name} fails the roll for ${item.name}, still has the ${condition} condition.` });\n    }\n}\n\nif (args[0].tag === \"OnUse\" && lastArg.targetUuids.length > 0 && args[0].macroPass === \"preSave\") {\n    const resist = [\"Duergar Resilience\", \"Paralysis Resilience\"];\n    for (let i = 0; i < lastArg.targetUuids.length; i++) {\n        let tokenOrActorTarget = await fromUuid(lastArg.targetUuids[i]);\n        let tactorTarget = tokenOrActorTarget.actor ? tokenOrActorTarget.actor : tokenOrActorTarget;\n        let getResist = tactorTarget.items.find(i => resist.includes(i.name));\n        if (getResist) {\n            const effectData = {\n                changes: [\n                    {\n                        key: \"flags.midi-qol.advantage.ability.save.all\",\n                        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n                        value: 1,\n                        priority: 20,\n                    }\n                ],\n                disabled: false,\n                flags: { dae: { specialDuration: [\"isSave\"] } },\n                icon: args[0].item.img,\n                label: `${args[0].item.name} Save Advantage`,\n            };\n            await tactorTarget.createEmbeddedDocuments(\"ActiveEffect\", [effectData]);\n        }\n    }\n}\n\nif (args[0] === \"each\" && lastArg.efData.disabled === false) {\n    const resist = [\"Duergar Resilience\", \"Paralysis Resilience\", \"Magic Resistance\"];\n    const getResist = tactor.items.find(i => resist.includes(i.name));\n    const targetToken = await fromUuid(lastArg.tokenUuid);\n    const condition = \"Paralyzed\";\n    const item = await fromUuid(lastArg.efData.origin);\n    attemptRemoval(targetToken, condition, item, getResist);\n}",
        "folder": null,
        "sort": 0,
        "permission": {
          "default": 0
        },
        "flags": {}
      }
    }
  }
}