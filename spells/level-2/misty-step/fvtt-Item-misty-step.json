{
  "name": "Misty Step",
  "type": "spell",
  "img": "https://assets.forge-vtt.com/bazaar/systems/dnd5e/assets/icons/spells/wind-grasp-air-1.jpg",
  "data": {
    "description": {
      "value": "<p>Briefly surrounded by silvery mist, you teleport up to 30 feet to an unoccupied space that you can see.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 260",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell",
      "value": ""
    },
    "level": 2,
    "school": "con",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": false,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "core": {
      "sourceId": "Compendium.dnd5e.spells.wqfAVANuQonNBgnL"
    },
    "scene-packer": {
      "hash": "eaf57e7cb042f05c16a5b90d28fb733a0e701e9f",
      "sourceId": "Item.iWQVLDkfXJ7KKzCv"
    },
    "rest-recovery": {
      "data": {
        "recovery": {
          "enabled": false
        }
      }
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "cf": {
      "id": "temp_6m7ecx5ywq4"
    },
    "itemacro": {
      "macro": {
        "_id": null,
        "name": "Misty Step",
        "type": "script",
        "author": "ckiTPzlaPztdkjV6",
        "img": "icons/svg/dice-target.svg",
        "scope": "global",
        "command": "// misty step\n// Credit to Auto Animations for the macro\n\nconst sourceToken = canvas.tokens.get(args[0]?.tokenId);\nconst sourceTokenGS = sourceToken.w / canvas.grid.size;\nconst teleDist = 30;\nconst drawingSize = (sourceToken.w * canvas.grid.size) + (2 * ((30 / canvas.dimensions.distance) * canvas.grid.size));\nconst userColor = game.user?.data?.color ? \"0x\" + game.user.data.color.replace(/^#/, '') : 0x0D26FF;\nconst filePath = \"modules/autoanimations/src/images/teleportCircle.png\";\nconst fileIn = \"jb2a.misty_step.01.blue\";\nconst fileOut = \"jb2a.misty_step.02.blue\";\nconst fileSound = \"https://assets.forge-vtt.com/630fc11845b0e419bee903cd/combat-sound-fx/magic/effect/teleport-1.ogg\";\n\nlet aaSeq01 = new Sequence()\naaSeq01.effect()\n    .file(filePath)\n    .atLocation(sourceToken)\n    .size(((sourceTokenGS / canvas.grid.size) + 0.5 + (teleDist / canvas.dimensions.distance)) * 2, {gridUnits: true})\n    .fadeIn(500)\n    .scaleIn(0, 500)\n    .fadeOut(500)\n    .name(\"teleportation\")\n    .belowTokens(true)\n    .persist(true)\n    .opacity(0.5)\n    .filter(\"Glow\", {\n        distance: 10,\n        outerStrength: 5,\n        innerStrength: 5,\n        color: userColor,\n        quality: 0.2,\n    })\n    .forUsers(Array.from(game.users).map(user => user.id))\naaSeq01.play()\n\nlet pos;\ncanvas.app.stage.addListener('pointerdown', event => {\n    if (event.data.button !== 0) { return }\n    pos = event.data.getLocalPosition(canvas.app.stage);\n\n    let topLeft = canvas.grid.getTopLeft(pos.x, pos.y);\n\n    if (checkDistance(sourceToken, { x: topLeft[0], y: topLeft[1] }) <= teleDist) {\n        deleteTemplatesAndMove();\n        canvas.app.stage.removeListener('pointerdown');\n    } else {\n        ui.notifications.warn(\"Selected location not in range\");\n    };\n});\n\nasync function deleteTemplatesAndMove() {\n\n    let gridPos = canvas.grid.getTopLeft(pos.x, pos.y);\n    let centerPos;\n    if (canvas.scene.gridType === 0) {\n        centerPos = [gridPos[0] + sourceToken.w, gridPos[1] + sourceToken.w];\n    } else {\n        centerPos = canvas.grid.getCenter(pos.x, pos.y);\n    }\n\n    Sequencer.EffectManager.endEffects({ name: \"teleportation\" })\n\n    let aaSeq = new Sequence();\n    aaSeq.effect()\n        .file(fileIn)\n        .atLocation(sourceToken)\n        .size(sourceTokenGS, {gridUnits: true})\n        .randomRotation()\n    aaSeq.sound()\n        .file(fileSound)\n    aaSeq.wait(250)\n    aaSeq.animation()\n        .on(sourceToken)\n        .opacity(0)\n        .teleportTo({ x: gridPos[0], y: gridPos[1] })\n    aaSeq.effect()\n        .file(fileOut)\n        .atLocation({ x: centerPos[0], y: centerPos[1] })\n        .size(sourceTokenGS, {gridUnits: true})\n        .randomRotation()\n    aaSeq.wait(1250)\n    aaSeq.animation()\n        .on(sourceToken)\n        .opacity(1)\n    aaSeq.play()\n};\n\n// Credit to TPosney / Midi-QOL for the Range Check\nfunction checkDistance(source, target) {\n    var x, x1, y, y1, d, r, segments = [], rdistance, distance;\n    for (x = 0; x < source.data.width; x++) {\n        for (y = 0; y < source.data.height; y++) {\n            const origin = new PIXI.Point(...canvas.grid.getCenter(source.data.x + (canvas.dimensions.size * x), source.data.y + (canvas.dimensions.size * y)));\n            for (x1 = 0; x1 < 1; x1++) {\n                for (y1 = 0; y1 < 1; y1++) {\n                    const dest = new PIXI.Point(...canvas.grid.getCenter(target.x + (canvas.dimensions.size * x1), target.y + (canvas.dimensions.size * y1)));\n                    const r = new Ray(origin, dest);\n                    segments.push({ ray: r });\n                };\n            };\n        };\n    };\n    if (segments.length === 0) {\n        return -1;\n    };\n    rdistance = canvas.grid.measureDistances(segments, { gridSpaces: true });\n    distance = rdistance[0];\n    rdistance.forEach(d => {\n        if (d < distance)\n            distance = d;\n    });\n    return distance;\n};",
        "folder": null,
        "sort": 0,
        "permission": {
          "default": 0
        },
        "flags": {}
      }
    },
    "exportSource": {
      "world": "dnd5e",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.3"
    }
  }
}