{
  "name": "Blindness/Deafness",
  "type": "spell",
  "img": "icons/magic/perception/eye-tendrils-web-purple.webp",
  "data": {
    "description": {
      "value": "<p>You can blind or deafen a foe. Choose one creature that you can see within range to make a Constitution saving throw. If it fails, the target is either @Compendium[dnd5e.rules.Blinded]{blinded} or @Compendium[dnd5e.rules.Deafened]{deafened} (your choice) for the duration. At the end of each of its turns, the target can make a Constitution saving throw. On a success, the spell ends.</p>\n<p><strong>At Higher Levels.</strong> When you cast this spell using a spell slot of 3rd level or higher, you can target one additional creature for each slot level above 2nd.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Basic Rules, Player's Handbook pg 219",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 30,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "con",
      "dc": null,
      "scaling": "spell"
    },
    "level": 2,
    "school": "nec",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": false,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [
    {
      "label": "Blindness/Deafness",
      "icon": "icons/magic/perception/eye-tendrils-web-purple.webp",
      "changes": [
        {
          "key": "flags.midi-qol.OverTime",
          "mode": 5,
          "value": "label=Blindness/Deafness (End of Turn),turn=end,saveDC=@attributes.spelldc,saveAbility=con,savingThrow=true,saveMagic=true",
          "priority": "20"
        },
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "",
          "priority": "20"
        }
      ],
      "duration": {
        "startTime": null
      },
      "tint": null,
      "transfer": false,
      "disabled": false,
      "flags": {
        "dae": {
          "transfer": false,
          "stackable": "none",
          "selfTarget": false,
          "durationExpression": "",
          "macroRepeat": "none",
          "specialDuration": []
        },
        "ddbimporter": {
          "disabled": false
        },
        "midi-qol": {
          "forceCEOff": true
        },
        "core": {
          "statusId": ""
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "_id": "0niunuy2vqkhub6p",
      "selectedKey": [
        "flags.midi-qol.OverTime",
        "macro.itemMacro"
      ]
    }
  ],
  "flags": {
    "ddbimporter": {
      "id": 136147,
      "definitionId": 2018,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "originalName": "Blindness/Deafness",
      "sources": [
        {
          "sourceId": 1,
          "pageNumber": null,
          "sourceType": 2
        },
        {
          "sourceId": 2,
          "pageNumber": 219,
          "sourceType": 1
        }
      ],
      "tags": [
        "Debuff"
      ],
      "version": "2.9.59",
      "effectsApplied": true
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Blindness/Deafness",
          "type": "script",
          "author": "otqBqyqMuTGDffTr",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "if (!game.modules.get(\"dfreds-convenient-effects\")?.active) {\n  ui.notifications.error(\"Please enable the CE module\");\n  return;\n}\n\nconst lastArg = args[args.length - 1];\nconst token = await fromUuid(lastArg.tokenUuid);\nconst tokenOrActor = await fromUuid(lastArg.actorUuid);\nconst targetActor = tokenOrActor.actor ? tokenOrActor.actor : tokenOrActor;\n\nfunction effectAppliedAndActive(conditionName) {\n  return targetActor.data.effects.some(\n    (activeEffect) =>\n      activeEffect?.data?.flags?.isConvenient &&\n      activeEffect?.data?.label == conditionName &&\n      !activeEffect?.data?.disabled\n  );\n}\n\nif (args[0] === \"on\") {\n  new Dialog({\n    title: \"Choose an Effect\",\n    buttons: {\n      blind: {\n        label: \"Blindness\",\n        callback: () => {\n\t\t  if (!targetActor.data.data.traits.ci.value.includes(\"Blinded\")) {\n\t\t\t  DAE.setFlag(targetActor, \"DAEBlind\", \"blind\");\n\t\t\t  game.dfreds.effectInterface.addEffect({ effectName: \"Blinded\", uuid: targetActor.uuid });\n\t\t\t  const changes = [\n\t\t\t\t{\n\t\t\t\t  key: \"ATCV.blinded\",\n\t\t\t\t  mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n\t\t\t\t  priority: 99,\n\t\t\t\t  value: \"1\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t  key: \"ATCV.conditionType\",\n\t\t\t\t  mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n\t\t\t\t  priority: 99,\n\t\t\t\t  value: \"sense\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t  key: \"ATCV.conditionBlinded\",\n\t\t\t\t  mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n\t\t\t\t  priority: 99,\n\t\t\t\t  value: \"true\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t  key: \"ATCV.conditionTargets\",\n\t\t\t\t  mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n\t\t\t\t  priority: 99,\n\t\t\t\t  value: \"\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t  key: \"ATCV.conditionSources\",\n\t\t\t\t  mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n\t\t\t\t  priority: 99,\n\t\t\t\t  value: \"\",\n\t\t\t\t},\n\t\t\t  ];\n\t\t\t  const effect = targetActor.effects.find((e) => e.data.label === lastArg.efData.label);\n\t\t\t  effect.update({ changes: changes.concat(effect.data.changes) });\n\t\t\t  const senses = targetActor.data.data.attributes.senses;\n\t\t\t  let visionRange = Math.max(senses.blindsight, senses.tremorsense, 0);\n\t\t\t  token.setFlag('perfect-vision', 'sightLimit', visionRange);\n\t\t  }\n        },\n      },\n      deaf: {\n        label: \"Deafness\",\n        callback: () => {\n          DAE.setFlag(targetActor, \"DAEBlind\", \"deaf\");\n          game.dfreds.effectInterface.addEffect({ effectName: \"Deafened\", uuid: targetActor.uuid });\n        },\n      },\n    },\n  }).render(true);\n}\n\nif (args[0] === \"off\") {\n  let flag = DAE.getFlag(targetActor, \"DAEBlind\");\n  if (flag === \"blind\") {\n    if (effectAppliedAndActive(\"Blinded\", targetActor))\n      game.dfreds.effectInterface.removeEffect({ effectName: \"Blinded\", uuid: targetActor.uuid });\n\t  token.setFlag('perfect-vision', 'sightLimit', null);\n  } else if (flag === \"deaf\") {\n    if (effectAppliedAndActive(\"Deafened\", targetActor))\n      game.dfreds.effectInterface.removeEffect({ effectName: \"Deafened\", uuid: targetActor.uuid });\n  }\n  DAE.unsetFlag(targetActor, \"DAEBlind\");\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        },
        "_id": null,
        "name": "Blindness/Deafness",
        "type": "script",
        "author": "ckiTPzlaPztdkjV6",
        "img": "icons/svg/dice-target.svg",
        "scope": "global",
        "command": "// blindness/deafness\n\nif (!game.modules.get(\"dfreds-convenient-effects\")?.active) {\n  ui.notifications.error(\"Please enable the CE module\");\n  return;\n}\n\nconst lastArg = args[args.length - 1];\nconst token = await fromUuid(lastArg.tokenUuid);\nconst tokenOrActor = await fromUuid(lastArg.actorUuid);\nconst targetActor = tokenOrActor.actor ? tokenOrActor.actor : tokenOrActor;\n\nfunction effectAppliedAndActive(conditionName) {\n  return targetActor.data.effects.some(\n    (activeEffect) =>\n      activeEffect?.data?.flags?.isConvenient &&\n      activeEffect?.data?.label == conditionName &&\n      !activeEffect?.data?.disabled\n  );\n}\n\nif (args[0] === \"on\") {\n  new Dialog({\n    title: \"Choose an Effect\",\n    buttons: {\n      blind: {\n        label: \"Blindness\",\n        callback: () => {\n\t\t  if (!targetActor.data.data.traits.ci.value.includes(\"Blinded\")) {\n\t\t\t  DAE.setFlag(targetActor, \"DAEBlind\", \"blind\");\n\t\t\t  game.dfreds.effectInterface.addEffect({ effectName: \"Blinded\", uuid: targetActor.uuid });\n\t\t\t  const changes = [\n\t\t\t\t{\n\t\t\t\t  key: \"ATCV.blinded\",\n\t\t\t\t  mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n\t\t\t\t  priority: 99,\n\t\t\t\t  value: \"1\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t  key: \"ATCV.conditionType\",\n\t\t\t\t  mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n\t\t\t\t  priority: 99,\n\t\t\t\t  value: \"sense\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t  key: \"ATCV.conditionBlinded\",\n\t\t\t\t  mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n\t\t\t\t  priority: 99,\n\t\t\t\t  value: \"true\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t  key: \"ATCV.conditionTargets\",\n\t\t\t\t  mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n\t\t\t\t  priority: 99,\n\t\t\t\t  value: \"\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t  key: \"ATCV.conditionSources\",\n\t\t\t\t  mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n\t\t\t\t  priority: 99,\n\t\t\t\t  value: \"\",\n\t\t\t\t},\n\t\t\t  ];\n\t\t\t  const effect = targetActor.effects.find((e) => e.data.label === lastArg.efData.label);\n\t\t\t  effect.update({ changes: changes.concat(effect.data.changes) });\n\t\t\t  const senses = targetActor.data.data.attributes.senses;\n\t\t\t  let visionRange = Math.max(senses.blindsight, senses.tremorsense, 0);\n\t\t\t  token.setFlag('perfect-vision', 'sightLimit', visionRange);\n\t\t  }\n        },\n      },\n      deaf: {\n        label: \"Deafness\",\n        callback: () => {\n          DAE.setFlag(targetActor, \"DAEBlind\", \"deaf\");\n          game.dfreds.effectInterface.addEffect({ effectName: \"Deafened\", uuid: targetActor.uuid });\n        },\n      },\n    },\n  }).render(true);\n}\n\nif (args[0] === \"off\") {\n  let flag = DAE.getFlag(targetActor, \"DAEBlind\");\n  if (flag === \"blind\") {\n    if (effectAppliedAndActive(\"Blinded\", targetActor))\n      game.dfreds.effectInterface.removeEffect({ effectName: \"Blinded\", uuid: targetActor.uuid });\n\t  token.setFlag('perfect-vision', 'sightLimit', null);\n  } else if (flag === \"deaf\") {\n    if (effectAppliedAndActive(\"Deafened\", targetActor))\n      game.dfreds.effectInterface.removeEffect({ effectName: \"Deafened\", uuid: targetActor.uuid });\n  }\n  DAE.unsetFlag(targetActor, \"DAEBlind\");\n}",
        "folder": null,
        "sort": 0,
        "permission": {
          "default": 0
        },
        "flags": {}
      }
    },
    "dae": {
      "activeEquipped": false,
      "alwaysActive": false
    },
    "midi-qol": {
      "onUseMacroName": "",
      "effectActivation": false,
      "forceCEOff": false,
      "forceCEOn": false
    },
    "core": {
      "sourceId": "Compendium.world.ddb-spells.NkVdzadvujtBysuh"
    },
    "rest-recovery": {
      "data": {
        "recovery": {
          "enabled": false
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "scene-packer": {
      "sourceId": "Item.PMVyIG2K3nvhfbUK",
      "hash": "846ac81e3dfc2884be8a2f224ee9f7ed0e6f06e2"
    },
    "exportSource": {
      "world": "dnd5e",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.3"
    }
  }
}