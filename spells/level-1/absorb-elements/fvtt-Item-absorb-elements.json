{
  "name": "Absorb Elements",
  "type": "spell",
  "img": "icons/magic/lightning/orb-ball-purple.webp",
  "data": {
    "description": {
      "value": "<p class=\"Core-Styles_Core-Body\">The spell captures some of the incoming energy, lessening its effect on you and storing it for your next melee attack. You have resistance to the triggering damage type until the start of your next turn. Also, the first time you hit with a melee attack on your next turn, the target takes an extra 1d6 damage of the triggering type, and the spell ends.</p>\n<p class=\"Core-Styles_Core-Body\"><span class=\"Serif-Character-Style_Inline-Subhead-Serif\"><strong>At Higher Levels.</strong> </span>When you cast this spell using a spell slot of 2nd level or higher, the extra damage increases by 1d6 for each slot level above 1st.</p>",
      "chat": "<p class=\"Core-Styles_Core-Body\">The spell captures some of the incoming energy, lessening its effect on you and storing it for your next melee attack. You have resistance to the triggering damage type until the start of your next turn. Also, the first time you hit with a melee attack on your next turn, the target takes an extra 1d6 damage of the triggering type, and the spell ends.</p>\n<p class=\"Core-Styles_Core-Body\"><span class=\"Serif-Character-Style_Inline-Subhead-Serif\"><strong>At Higher Levels.</strong> </span>When you cast this spell using a spell slot of 2nd level or higher, the extra damage increases by 1d6 for each slot level above 1st.</p>",
      "unidentified": ""
    },
    "source": "Elemental Evil Player's Companion pg 150",
    "activation": {
      "type": "reactiondamage",
      "cost": 1,
      "condition": "which you take when you take acid, cold, fire, lightning, or thunder damage"
    },
    "duration": {
      "value": 1,
      "units": "round"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": "0",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 1,
    "school": "abj",
    "components": {
      "value": "",
      "vocal": false,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "level",
      "formula": "1d6"
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 137857,
      "definitionId": 2368,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "class": "Druid",
        "level": null,
        "characterClassId": 64892372,
        "spellLevel": 1,
        "ability": "wis",
        "mod": 4,
        "dc": 14,
        "cantripBoost": false,
        "overrideDC": false,
        "id": 137857,
        "entityTypeId": 435869154,
        "healingBoost": 0,
        "lookupName": "generic",
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 4,
          "pageNumber": 150,
          "sourceType": 1
        }
      ],
      "tags": [
        "Damage",
        "Warding"
      ],
      "pack": "world.ddb-darklands-spells",
      "originalItemName": "Absorb Elements",
      "replaced": true
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "enhanced-terrain-layer": {
      "multiple": 1,
      "min": 0,
      "max": 0,
      "environment": ""
    },
    "midi-qol": {
      "criticalThreshold": "20",
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Absorb Elements",
          "type": "script",
          "author": "otqBqyqMuTGDffTr",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "// absorb elements\n\nconst lastArg = args[args.length - 1];\nconst tokenD = canvas.tokens.get(lastArg.tokenId);\nconst actorD = tokenD.actor;\n\nif (args[0].tag === \"OnUse\") {\n    const itemD = lastArg.item;\n    const spellLevel = lastArg.spellLevel;\n    let elements = [\"acid\", \"cold\", \"fire\", \"lightning\", \"poison\"];\n    let damageDetail = args[0].workflowOptions.damageDetail;\n    let options = [];\n    Object.keys(damageDetail).forEach((key) => {\n        if (elements.includes(damageDetail[key].type.toLowerCase())) {\n            options.push(damageDetail[key].type.toLowerCase())\n        }\n    })\n    let type;\n    if (options.length === 0) {\n        return ui.notifications.error(`The spell fizzles, No elemental damage found`);\n    } else if (options.length === 1) {\n        type = options[0];\n    } else {\n        const optionContent = options.map((o) => { return `<option value=\"${o}\">${CONFIG.DND5E.damageTypes[o]}</option>` })\n        const content = `\n        <div class=\"form-group\">\n        <label>Damage Types : </label>\n        <select name=\"types\"}>\n        ${optionContent}\n        </select>\n        </div>\n        `;\n        let dialog = new Promise((resolve, reject) => {\n            new Dialog({\n                title: \"Absorb Elements: Choose a damage type to resist\",\n                content,\n                buttons: {\n                    Ok: {\n                        label: \"Ok\",\n                        callback: (html) => {resolve(html.find(\"[name=types]\")[0].value)},\n                    },\n                    Cancel: {\n                        label: \"Cancel\",\n                        callback: () => {resolve(false)},\n                    },\n                },\n\t\t\t    default: \"Cancel\",\n\t\t\t    close: () => {resolve(false)}\n            }).render(true);\n        });\n        type = await dialog;\n    }\n    if (!type) return;\n    let gameRound = game.combat ? game.combat.rounds : 0;\n    let effectData = [{\n        label: itemD.name,\n        icon: itemD.img,\n        changes: [\n            { key: `data.traits.dr.value`, mode: 2, value: type, priority: 20 },\n            { key: `macro.itemMacro`, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: `${type} ${spellLevel}`, priority: 20 },\n        ],\n        origin: lastArg.uuid,\n        disabled: false,\n        duration: {rounds: 1, startTime: game.time.worldTime, startRound: gameRound },\n        flags: { dae: { specialDuration: [\"turnStartSource\"], itemData: itemD } },\n    }]\n    await actorD.createEmbeddedDocuments(\"ActiveEffect\", effectData);\n}\n\nif (args[0] === \"off\" && (lastArg[\"expiry-reason\"] === \"times-up:duration:turns\" || lastArg[\"expiry-reason\"] === \"times-up:duration-special\")) {\n    let type = args[1];\n    let level = args[2];\n    let gameRound = game.combat ? game.combat.rounds : 0;\n    let effectData = [{\n        label: \"Absorb Elements Damage Bonus\",\n        icon: \"systems/dnd5e/icons/skills/weapon_25.jpg\",\n        changes: [\n            { key: \"flags.dnd5e.DamageBonusMacro\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: `ItemMacro.Absorb Elements`, priority: 20 },\n            { key: \"flags.midi-qol.absorbType\", mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, value: `${type}`, priority: 20 },\n            { key: \"flags.midi-qol.absorbLevel\", mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, value: `${level}`, priority: 20 },\n        ],\n        disabled: false,\n        duration: {turns: 1, startTime: game.time.worldTime, startRound: gameRound },\n        flags: { dae: { specialDuration: [\"1Attack:mwak\"] } },\n    }]\n    await actorD.createEmbeddedDocuments(\"ActiveEffect\", effectData);\n}\n\nif (args[0].tag === \"DamageBonus\") {\n    if (![\"mwak\"].includes(lastArg.item.data.actionType)) return;\n    let type = getProperty(actorD.data.flags, \"midi-qol.absorbType\");\n    let level = getProperty(actorD.data.flags, \"midi-qol.absorbLevel\");\n    const diceMult = args[0].isCritical ? level * 2 : level;\n    return { damageRoll: `${diceMult}d6[${type}]`, flavor: `(Absorb Elements (${CONFIG.DND5E.damageTypes[type]}))` };\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        },
        "_id": null,
        "name": "Absorb Elements",
        "type": "script",
        "author": "ckiTPzlaPztdkjV6",
        "img": "icons/svg/dice-target.svg",
        "scope": "global",
        "command": "// absorb elements\n\nconst lastArg = args[args.length - 1];\nconst tokenD = canvas.tokens.get(lastArg.tokenId);\nconst actorD = tokenD.actor;\n\nif (args[0].tag === \"OnUse\") {\n    const itemD = lastArg.item;\n    const spellLevel = lastArg.spellLevel;\n    let elements = [\"acid\", \"cold\", \"fire\", \"lightning\", \"poison\"];\n    let damageDetail = args[0].workflowOptions.damageDetail;\n    let options = [];\n    Object.keys(damageDetail).forEach((key) => {\n        if (elements.includes(damageDetail[key].type.toLowerCase())) {\n            options.push(damageDetail[key].type.toLowerCase())\n        }\n    })\n    let type;\n    if (options.length === 0) {\n        return ui.notifications.error(`The spell fizzles, No elemental damage found`);\n    } else if (options.length === 1) {\n        type = options[0];\n    } else {\n        const optionContent = options.map((o) => { return `<option value=\"${o}\">${CONFIG.DND5E.damageTypes[o]}</option>` })\n        const content = `\n        <div class=\"form-group\">\n        <label>Damage Types : </label>\n        <select name=\"types\"}>\n        ${optionContent}\n        </select>\n        </div>\n        `;\n        let dialog = new Promise((resolve, reject) => {\n            new Dialog({\n                title: \"Absorb Elements: Choose a damage type to resist\",\n                content,\n                buttons: {\n                    Ok: {\n                        label: \"Ok\",\n                        callback: (html) => {resolve(html.find(\"[name=types]\")[0].value)},\n                    },\n                    Cancel: {\n                        label: \"Cancel\",\n                        callback: () => {resolve(false)},\n                    },\n                },\n\t\t\t    default: \"Cancel\",\n\t\t\t    close: () => {resolve(false)}\n            }).render(true);\n        });\n        type = await dialog;\n    }\n    if (!type) return;\n    let effectData = [{\n        label: itemD.name,\n        icon: itemD.img,\n        changes: [\n            { key: `data.traits.dr.value`, mode: 2, value: type, priority: 20 },\n            { key: `macro.itemMacro`, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: `${type} ${spellLevel}`, priority: 20 },\n        ],\n        origin: lastArg.uuid,\n        disabled: false,\n        flags: { dae: { specialDuration: [\"turnStartSource\"], itemData: itemD } , core: { statusId: \"Absorb Elements\" }},\n    }]\n    await actorD.createEmbeddedDocuments(\"ActiveEffect\", effectData);\n}\n\nif (args[0] === \"off\" && lastArg[\"expiry-reason\"] === \"times-up:duration-special\") {\n    let type = args[1];\n    let level = args[2];\n    let gameRound = game.combat ? game.combat.rounds : 0;\n    let effectData = [{\n        label: \"Absorb Elements Damage Bonus\",\n        icon: \"systems/dnd5e/icons/skills/weapon_25.jpg\",\n        changes: [\n            { key: \"flags.dnd5e.DamageBonusMacro\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: `ItemMacro.Absorb Elements`, priority: 20 },\n            { key: \"flags.midi-qol.absorbType\", mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, value: `${type}`, priority: 20 },\n            { key: \"flags.midi-qol.absorbLevel\", mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, value: `${level}`, priority: 20 },\n        ],\n        disabled: false,\n        duration: {turns: 1, startTime: game.time.worldTime, startRound: gameRound },\n        flags: { dae: { specialDuration: [\"1Attack:mwak\"] } },\n    }]\n    await actorD.createEmbeddedDocuments(\"ActiveEffect\", effectData);\n}\n\nif (args[0].tag === \"DamageBonus\") {\n    if (![\"mwak\"].includes(lastArg.item.data.actionType)) return;\n    let type = getProperty(actorD.data.flags, \"midi-qol.absorbType\");\n    let level = getProperty(actorD.data.flags, \"midi-qol.absorbLevel\");\n    const diceMult = args[0].isCritical ? level * 2 : level;\n    return { damageRoll: `${diceMult}d6[${type}]`, flavor: `(Absorb Elements (${CONFIG.DND5E.damageTypes[type]}))` };\n}",
        "folder": null,
        "sort": 0,
        "permission": {
          "default": 0
        },
        "flags": {}
      }
    },
    "core": {
      "sourceId": "Item.RBQxJiSrbmaHUWmy"
    },
    "exportSource": {
      "world": "dnd5e",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.3"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "rest-recovery": {
      "data": {
        "recovery": {
          "enabled": false
        }
      }
    },
    "scene-packer": {
      "sourceId": "Item.kW8d6rQ07RcCtHbd",
      "hash": "7d45966f5d613354763f348c35b12a70f03f8cb5"
    },
    "cf": {
      "id": "temp_bo019z0gcv"
    }
  }
}