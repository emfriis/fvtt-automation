{
  "name": "Sleep",
  "type": "spell",
  "img": "systems/dnd5e/icons/spells/light-magenta-1.jpg",
  "data": {
    "description": {
      "value": "<p>This spell sends creatures into a magical slumber. Roll 5d8; the total is how many hit points of creatures this spell can affect. Creatures within 20 feet of a point you choose within range are affected in ascending order of their current hit points (ignoring @Compendium[dnd5e.rules.Unconscious]{unconscious} creatures).</p>\n<p>Starting with the creature that has the lowest current hit points, each creature affected by this spell falls @Compendium[dnd5e.rules.Unconscious]{unconscious} until the spell ends (after 1 minute), the sleeper takes damage, or someone uses an action to shake or slap the sleeper awake. Subtract each creature’s hit points from the total before moving on to the creature with the next lowest hit points. A creature’s hit points must be equal to or less than the remaining total for that creature to be affected.</p>\n<p>Undead and creatures immune to being @Compendium[dnd5e.rules.Charmed]{charmed} aren’t affected by this spell.</p>\n<p><em><strong>At Higher Levels.</strong></em> When you cast this spell using a spell slot of 2nd level or higher, roll an additional 2d8 for each slot level above 1st.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Basic Rules, Player's Handbook pg 276",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": 20,
      "width": null,
      "units": "ft",
      "type": "sphere"
    },
    "range": {
      "value": 90,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [
        [
          "5d8",
          "midi-none"
        ]
      ],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 1,
    "school": "enc",
    "components": {
      "value": "a pinch of fine sand, rose petals, or a cricket",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "a pinch of fine sand, rose petals, or a cricket",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "level",
      "formula": "2d8"
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 138729,
      "definitionId": 2254,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "originalName": "Sleep",
      "sources": [
        {
          "sourceId": 1,
          "pageNumber": null,
          "sourceType": 2
        },
        {
          "sourceId": 2,
          "pageNumber": 276,
          "sourceType": 1
        }
      ],
      "tags": [
        "Control"
      ],
      "version": "2.9.59",
      "effectsApplied": true
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Sleep",
          "type": "script",
          "author": "otqBqyqMuTGDffTr",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "// based on @ccjmk and @crymic macro for sleep. Gets targets and ignores those who are immune to sleep.\n// uses convinient effects\n// Midi-qol \"On Use\"\n\nasync function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }\nconst sleepHp = await args[0].damageTotal;\nconst condition = \"Unconscious\";\nconsole.log(`Sleep Spell => Available HP Pool [${sleepHp}] points`);\nconst targets = await args[0].targets.filter((i) => i.actor.data.data.attributes.hp.value != 0 && !i.actor.effects.find(x => x.data.label === condition)).sort((a, b) => canvas.tokens.get(a.id).actor.data.data.attributes.hp.value < canvas.tokens.get(b.id).actor.data.data.attributes.hp.value ? -1 : 1);\nlet remainingSleepHp = sleepHp;\nlet sleepTarget = [];\n\nfor (let target of targets) {\n    const findTarget = await canvas.tokens.get(target.id);\n    const immuneType = findTarget.actor.data.type === \"character\" ? [\"undead\", \"construct\"].some(race => (findTarget.actor.data.data.details.race || \"\").toLowerCase().includes(race)) : [\"undead\", \"construct\"].some(value => (findTarget.actor.data.data.details.type.value || \"\").toLowerCase().includes(value));\n    const immuneCI = findTarget.actor.data.data.traits.ci.custom.includes(\"Sleep\");\n    const sleeping = findTarget.actor.effects.find((i) => i.data.label === condition);\n    const targetHpValue = findTarget.actor.data.data.attributes.hp.value;\n    if ((immuneType) || (immuneCI) || (sleeping)) {\n        console.log(`Sleep Results => Target: ${findTarget.name} | HP: ${targetHpValue} | Status: Resists`);\n        sleepTarget.push(`<div class=\"midi-qol-flex-container\"><div>Resists</div><div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${findTarget.id}\"> ${findTarget.name}</div><div><img src=\"${findTarget.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\"></div></div>`);\n        continue;\n    }\n    if (remainingSleepHp >= targetHpValue) {\n        remainingSleepHp -= targetHpValue;\n        console.log(`Sleep Results => Target: ${findTarget.name} |  HP: ${targetHpValue} | HP Pool: ${remainingSleepHp} | Status: Slept`);\n        sleepTarget.push(`<div class=\"midi-qol-flex-container\"><div>Slept</div><div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${findTarget.id}\"> ${findTarget.name}</div><div><img src=\"${findTarget.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\"></div></div>`);\n        const gameRound = game.combat ? game.combat.round : 0;\n        const effectData = {\n            label: \"Sleep Spell\",\n            icon: \"icons/svg/sleep.svg\",\n            origin: args[0].uuid,\n            disabled: false,\n            duration: { rounds: 10, seconds: 60, startRound: gameRound, startTime: game.time.worldTime },\n            flags: { dae: { specialDuration: [\"isDamaged\"] } },\n            changes: [\n              { key: \"macro.CE\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: \"Unconscious\", priority: 20 },\n              { key: \"macro.CE\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: \"Prone\", priority: 20 },\n            ]\n        };\n        await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: findTarget.actor.uuid, effects: [effectData] });\n        continue;\n    } else {\n        console.log(`Sleep Results => Target: ${target.name} | HP: ${targetHpValue} | HP Pool: ${remainingSleepHp - targetHpValue} | Status: Missed`);\n        sleepTarget.push(`<div class=\"midi-qol-flex-container\"><div>misses</div><div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${findTarget.id}\"> ${findTarget.name}</div><div><img src=\"${findTarget.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\"></div></div>`);\n    }\n}\nawait wait(500);\nconst sleptResults = `<div><div class=\"midi-qol-nobox\">${sleepTarget.join('')}</div></div>`;\nconst chatMessage = game.messages.get(args[0].itemCardId);\nlet content = duplicate(chatMessage.data.content);\nconst searchString = /<div class=\"midi-qol-hits-display\">[\\s\\S]*<div class=\"end-midi-qol-hits-display\">/g;\nconst replaceString = `<div class=\"midi-qol-hits-display\"><div class=\"end-midi-qol-hits-display\">${sleptResults}`;\ncontent = await content.replace(searchString, replaceString);\nawait chatMessage.update({ content: content });",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "core": {
      "sourceId": "Compendium.world.ddb-spells.FcMhIOEn9bp84Aim"
    },
    "rest-recovery": {
      "data": {
        "recovery": {
          "enabled": false
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "scene-packer": {
      "sourceId": "Item.AtWQ0F2YVVcUrPCP",
      "hash": "17de535384bfd1a5decf2ea399c4f197baf939a3"
    },
    "exportSource": {
      "world": "Curse of Strahd",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.3"
    },
    "enhanced-terrain-layer": {
      "multiple": null,
      "elevation": null,
      "depth": null,
      "environment": ""
    }
  }
}