{
  "name": "Tasha's Hideous Laughter",
  "type": "spell",
  "img": "icons/sundries/misc/teeth-dentures.webp",
  "data": {
    "description": {
      "value": "<p>A creature of your choice that you can see within range perceives everything as hilariously funny and falls into fits of laughter if this spell affects it. The target must succeed on a Wisdom saving throw or fall @Compendium[dnd5e.rules.Prone]{prone}, becoming @Compendium[dnd5e.rules.Incapacitated]{incapacitated} and unable to stand up for the duration. A creature with an Intelligence score of 4 or less isn’t affected.<br /><br />At the end of each of its turns, and each time it takes damage, the target can make another Wisdom saving throw. The target has advantage on the saving throw if it’s triggered by damage. On a success, the spell ends.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Player's Handbook pg 280",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 30,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "wis",
      "dc": null,
      "scaling": "spell"
    },
    "level": 1,
    "school": "enc",
    "components": {
      "value": "tiny tarts and a feather that is waved in the air",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "tiny tarts and a feather that is waved in the air",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [
    {
      "label": "Tasha's Hideous Laughter",
      "icon": "icons/sundries/misc/teeth-dentures.webp",
      "changes": [
        {
          "key": "flags.midi-qol.OverTime",
          "mode": 5,
          "value": "label=Hideous Laughter (End of Turn),turn=end,saveDC=@attributes.spelldc,saveAbility=wis,saveMagic=true",
          "priority": "20"
        },
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "",
          "priority": "20"
        },
        {
          "key": "StatusEffect",
          "mode": 0,
          "value": "Convenient Effect: Incapacitated",
          "priority": "0"
        }
      ],
      "duration": {
        "startTime": null
      },
      "tint": null,
      "transfer": false,
      "disabled": false,
      "flags": {
        "dae": {
          "transfer": false,
          "stackable": "none",
          "selfTarget": false,
          "durationExpression": "",
          "macroRepeat": "none",
          "specialDuration": []
        },
        "ddbimporter": {
          "disabled": false
        },
        "midi-qol": {
          "forceCEOff": true
        },
        "core": {
          "statusId": ""
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "_id": "ezmjcs2dizpzcqef",
      "selectedKey": [
        "flags.midi-qol.OverTime",
        "macro.itemMacro",
        "StatusEffect"
      ]
    }
  ],
  "flags": {
    "ddbimporter": {
      "id": 138833,
      "definitionId": 2320,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "originalName": "Tasha's Hideous Laughter",
      "sources": [
        {
          "sourceId": 2,
          "pageNumber": 280,
          "sourceType": 1
        }
      ],
      "tags": [
        "Control",
        "Debuff"
      ],
      "version": "2.9.59",
      "effectsApplied": true
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Tasha's Hideous Laughter",
          "type": "script",
          "author": "otqBqyqMuTGDffTr",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const lastArg = args[args.length - 1];\nconst tokenOrActor = await fromUuid(lastArg.actorUuid);\nconst targetActor = tokenOrActor.actor ? tokenOrActor.actor : tokenOrActor;\nconst targetToken = await fromUuid(lastArg.tokenUuid);\n\nconst DAEItem = lastArg.efData.flags.dae.itemData;\nconst saveData = DAEItem.data.save;\nconst flavor = `${CONFIG.DND5E.abilities[\"wis\"]} DC${saveData.dc} ${DAEItem?.name || \"\"}`;\n\nasync function cleanUp() {\n  // remove hook\n  const flag = await DAE.getFlag(targetActor, \"hideousLaughterHook\");\n  if (flag) {\n    Hooks.off(\"preUpdateActor\", flag);\n    await DAE.unsetFlag(targetActor, \"hideousLaughterHook\");\n  }\n  // remove effect\n  await targetActor.deleteEmbeddedDocuments(\"ActiveEffect\", [lastArg.effectId]);\n}\n\nasync function onDamageHook(hookActor, update, options, userId) {\n  const flag = await DAE.getFlag(hookActor, \"hideousLaughterHook\");\n  if (!\"actorData.data.attributes.hp\" in update || !flag) return;\n  const oldHP = hookActor.data.data.attributes.hp.value;\n  const newHP = getProperty(update, \"data.attributes.hp.value\");\n  const hpChange = oldHP - newHP;\n  if (hpChange > 0 && typeof hpChange === \"number\") {\n    console.warn(\"hookActor\", hookActor);\n    const saveActor = game.actors.get(hookActor.id);\n    const saveRoll = await saveActor.rollAbilitySave(saveData.ability, {\n      flavor,\n      fastForward: true,\n      advantage: true,\n    });\n    if (saveRoll.total >= saveData.dc) {\n      await cleanUp();\n    }\n  }\n}\n\nif (args[0] === \"on\") {\n  if (targetActor.data.data.abilities.int.value < 4) {\n    await cleanUp();\n  } else {\n    if (!actor.effects.find(i => i.data.label === \"Prone\")) {\n\t\tlet effectData = {\n\t\t\tlabel: \"Prone\",\n\t\t\ticon: \"icons/svg/falling.svg\",\n\t\t\torigin: args[0].uuid,\n\t\t\tdisabled: false,\n\t\t\tchanges: [{ key: `StatusEffect`, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: \"Convenient Effect: Prone\", priority: 20 }]\n\t\t};\n\t\tawait MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: targetActor.uuid, effects: [effectData] });\n\t};\n    const hookId = Hooks.on(\"preUpdateActor\", onDamageHook);\n    await DAE.setFlag(targetActor, \"hideousLaughterHook\", hookId);\n  }\n}\n\nif (args[0] === \"off\") {\n  await cleanUp();\n}\n\nif (args[0] === \"each\") {\n  const saveRoll = await targetActor.rollAbilitySave(saveData.ability, { flavor });\n  if (saveRoll.total >= saveData.dc) {\n    await cleanUp();\n  }\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        },
        "_id": null,
        "name": "Tasha's Hideous Laughter",
        "type": "script",
        "author": "ckiTPzlaPztdkjV6",
        "img": "icons/svg/dice-target.svg",
        "scope": "global",
        "command": "// tasha's hideous laughter\n\nconst lastArg = args[args.length - 1];\nconst tokenOrActor = await fromUuid(lastArg.actorUuid);\nconst targetActor = tokenOrActor.actor ? tokenOrActor.actor : tokenOrActor;\nconst targetToken = await fromUuid(lastArg.tokenUuid);\n\nconst DAEItem = lastArg.efData.flags.dae.itemData;\nconst saveData = DAEItem.data.save;\nconst flavor = `${CONFIG.DND5E.abilities[\"wis\"]} DC${saveData.dc} ${DAEItem?.name || \"\"}`;\n\nasync function cleanUp() {\n  // remove hook\n  const flag = await DAE.getFlag(targetActor, \"hideousLaughterHook\");\n  if (flag) {\n    Hooks.off(\"preUpdateActor\", flag);\n    await DAE.unsetFlag(targetActor, \"hideousLaughterHook\");\n  }\n  // remove effect\n  await targetActor.deleteEmbeddedDocuments(\"ActiveEffect\", [lastArg.effectId]);\n}\n\nasync function onDamageHook(hookActor, update, options, userId) {\n  const flag = await DAE.getFlag(hookActor, \"hideousLaughterHook\");\n  if (!\"actorData.data.attributes.hp\" in update || !flag) return;\n  const oldHP = hookActor.data.data.attributes.hp.value;\n  const newHP = getProperty(update, \"data.attributes.hp.value\");\n  const hpChange = oldHP - newHP;\n  if (hpChange > 0 && typeof hpChange === \"number\") {\n    console.warn(\"hookActor\", hookActor);\n    const saveActor = game.actors.get(hookActor.id);\n    const saveRoll = await saveActor.rollAbilitySave(saveData.ability, {\n      flavor,\n      fastForward: true,\n      advantage: true,\n    });\n    if (saveRoll.total >= saveData.dc) {\n      await cleanUp();\n    }\n  }\n}\n\nif (args[0] === \"on\") {\n  if (targetActor.data.data.abilities.int.value < 4) {\n    await cleanUp();\n  } else {\n    if (!actor.effects.find(i => i.data.label === \"Prone\")) {\n\t\tlet effectData = {\n\t\t\tlabel: \"Prone\",\n\t\t\ticon: \"icons/svg/falling.svg\",\n\t\t\torigin: args[0].uuid,\n\t\t\tdisabled: false,\n\t\t\tchanges: [{ key: `StatusEffect`, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: \"Convenient Effect: Prone\", priority: 20 }]\n\t\t};\n\t\tawait MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: targetActor.uuid, effects: [effectData] });\n\t};\n    const hookId = Hooks.on(\"preUpdateActor\", onDamageHook);\n    await DAE.setFlag(targetActor, \"hideousLaughterHook\", hookId);\n  }\n}\n\nif (args[0] === \"off\") {\n  await cleanUp();\n}\n\nif (args[0] === \"each\") {\n  const saveRoll = await targetActor.rollAbilitySave(saveData.ability, { flavor });\n  if (saveRoll.total >= saveData.dc) {\n    await cleanUp();\n  }\n}",
        "folder": null,
        "sort": 0,
        "permission": {
          "default": 0
        },
        "flags": {}
      }
    },
    "core": {
      "sourceId": "Compendium.world.ddb-spells.gxb1LTZ0RGkbJKxV"
    },
    "midi-qol": {
      "effectActivation": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "rest-recovery": {
      "data": {
        "recovery": {
          "enabled": false
        }
      }
    },
    "scene-packer": {
      "sourceId": "Item.a30aNqq7iNtdrjuG",
      "hash": "fbec26e5bc9891676792ddff66a412dedf34b600"
    },
    "exportSource": {
      "world": "dnd5e",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.3"
    }
  }
}