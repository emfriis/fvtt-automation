{
  "name": "Blinding Smite",
  "type": "spell",
  "img": "systems/dnd5e/icons/spells/enchant-sky-3.jpg",
  "data": {
    "description": {
      "value": "<p>The next time you hit a creature with a melee weapon attack during this spellâ€™s duration, you weapon flares with a bright light, and the attack deals an extra 3d8 radiant damage to the target. Additionally, the target must succeed on a Constitution saving throw or be @Compendium[dnd5e.rules.Blinded]{blinded} until the spell ends.</p>\n<p>A creature @Compendium[dnd5e.rules.Blinded]{blinded} by this spell makes another Constitution saving throw at the end of each of its turns. On a successful save, it is no longer @Compendium[dnd5e.rules.Blinded]{blinded}.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Player's Handbook pg 219",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 3,
    "school": "evo",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": false,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 136137,
      "definitionId": 2334,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "originalName": "Blinding Smite",
      "sources": [
        {
          "sourceId": 2,
          "pageNumber": 219,
          "sourceType": 1
        }
      ],
      "tags": [
        "Damage",
        "Control"
      ],
      "version": "2.9.59",
      "effectsApplied": true
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "core": {
      "sourceId": "Compendium.world.ddb-spells.Eu3jw7BeR7srVU5O"
    },
    "rest-recovery": {
      "data": {
        "recovery": {
          "enabled": false
        }
      }
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Blinding Smite",
          "type": "script",
          "author": "otqBqyqMuTGDffTr",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "// blinding smite\n\nasync function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }\nconst lastArg = args[args.length - 1];\nconst tokenD = canvas.tokens.get(lastArg.tokenId);\nconst actorD = tokenD.actor;\nconst gameRound = game.combat ? game.combat.round : 0;\n\nif (lastArg.tag === \"OnUse\") {\n    let itemD = lastArg.item;\n    let itemName = game.i18n.localize(itemD.name);\n    let effectData = [{\n        changes: [\n            { key: \"flags.dnd5e.DamageBonusMacro\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: `ItemMacro.${itemName}`, priority: 20 },\n            { key: \"flags.midi-qol.spellId\", mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, value: lastArg.uuid, priority: 20 }\n        ],\n        origin: lastArg.uuid,\n        disabled: false,\n        duration: { rounds: 10, startRound: gameRound, startTime: game.time.worldTime },\n        flags: {\n            \"dae\": { itemData: itemD, specialDuration: [\"1Hit\"] }\n        },\n        icon: itemD.img,\n        label: itemName\n    }];\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: tokenD.actor.uuid, effects: effectData });\n}\n\nif (lastArg.tag === \"DamageBonus\") {\n    if (![\"mwak\"].includes(lastArg.item.data.actionType)) return {};\n    let target = canvas.tokens.get(lastArg.hitTargets[0].id);\n    let spellDC = actorD.data.data.attributes.spelldc;\n    let conc = actorD.effects.find(i => i.data.label === game.i18n.localize(\"Concentrating\"));\n    let spellUuid = getProperty(actorD.data.flags, \"midi-qol.spellId\");\n    let spellItem = await fromUuid(getProperty(actorD.data.flags, \"midi-qol.spellId\"));\n    let itemName = game.i18n.localize(spellItem.name);\n    let damageType = \"radiant\";\n    let effectData = [{\n        changes: [\n            { key: `StatusEffect`, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: \"Convenient Effect: Blinded\", priority: 20 },\n            { key: `flags.midi-qol.OverTime`, mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, value: `turn=end,label=${itemName},saveDC=${spellDC},saveAbility=con,saveMagic=true`, priority: 20 },\n            { key: `macro.itemMacro`, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: \"\", priority: 20 },\n            { key: `flags.dae.deleteUuid`, mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, value: conc.uuid, priority: 20 },\n            { key: \"ATCV.blinded\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 99, value: \"1\" },\n            { key: \"ATCV.conditionBlinded\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 99, value: \"true\" },\n            { key: \"ATCV.conditionType\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 99, value: \"sense\" },\n            { key: \"ATCV.conditionTargets\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 99, value: \"\" }, \n            { key: \"ATCV.conditionSources\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 99, value: \"\" }\n        ],\n        origin: spellUuid,\n        flags: {\n            \"dae\": { itemData: spellItem.data, token: target.actor.uuid }\n        },\n        disabled: false,\n        duration: { rounds: 10, startRound: gameRound, startTime: game.time.worldTime },\n        icon: spellItem.img,\n        label: itemName\n    }];\n\n    if (conc) {\n        const flavor = `${\"Blinded\"} (via ${itemName}) : ${CONFIG.DND5E.abilities[\"con\"]} ${\"save\"} vs DC${spellDC}`;\n        let save = (await target.actor.rollAbilitySave(\"wis\", { flavor })).total;\n        if (save < spellDC) {\n            await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.actor.uuid, effects: effectData });\n        }\n        let concUpdate = await getProperty(actorD.data.flags, \"midi-qol.concentration-data.targets\");\n        await concUpdate.push({ tokenUuid: target.document.uuid, actorUuid: target.actor.uuid });\n        await actorD.setFlag(\"midi-qol\", \"concentration-data.targets\", concUpdate);\n    }\n\n    const diceMult = args[0].isCritical ? 6 : 3;\n    return { damageRoll: `${diceMult}d8[${damageType}]`, flavor: `(${itemName} (${CONFIG.DND5E.damageTypes[damageType]}))` };\n}\n\nif (args[0] === \"on\" && !actorD.data.data.traits.ci.value.includes(\"Blinded\")) {\n    const token = await fromUuid(lastArg.tokenUuid);\n    const senses = actorD.data.data.attributes.senses;\n    let visionRange = Math.max(senses.blindsight, senses.tremorsense, 0);\n    token.setFlag('perfect-vision', 'sightLimit', visionRange);\n}\n\nif (args[0] === \"off\" && !actorD.effects.find(i => i.data.label === \"Blinded\")) {\n    const token = await fromUuid(lastArg.tokenUuid);\n    token.setFlag('perfect-vision', 'sightLimit', null);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "scene-packer": {
      "hash": "0cd6dabfa8a2651e10e10b1b3e09157b966b0027",
      "sourceId": "Item.BgIcZNInzkcAO1vA"
    },
    "exportSource": {
      "world": "Curse of Strahd",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.3"
    }
  }
}