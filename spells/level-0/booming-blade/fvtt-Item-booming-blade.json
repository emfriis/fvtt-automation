{
  "name": "Booming Blade",
  "type": "spell",
  "img": "systems/dnd5e/icons/skills/weapon_25.jpg",
  "data": {
    "description": {
      "value": "<p>You brandish the weapon used in the spell’s casting and make a melee attack with it against one creature within 5 feet of you. On a hit, the target suffers the weapon attack’s normal effects and then becomes sheathed in booming energy until the start of your next turn. If the target willingly moves 5 feet or more before then, the target takes 1d8 thunder damage, and the spell ends.</p>\n<p>This spell’s damage increases when you reach certain levels. At 5th level, the melee attack deals an extra 1d8 thunder damage to the target on a hit, and the damage the target takes for moving increases to 2d8. Both damage rolls increase by 1d8 at 11th level (2d8 and 3d8) and again at 17th level (3d8 and 4d8).</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Sword Coast Adventurer's Guide pg 142",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "round"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "[1d8 - thunder] Moving Target",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 0,
    "school": "evo",
    "components": {
      "value": "a melee weapon worth at least 1 sp",
      "vocal": false,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "a melee weapon worth at least 1 sp",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "cantrip",
      "formula": "1d8"
    }
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 130378,
      "definitionId": 2410,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "originalName": "Booming Blade",
      "sources": [
        {
          "sourceId": 13,
          "pageNumber": 142,
          "sourceType": 1
        }
      ],
      "tags": [
        "Damage",
        "Control",
        "Combat"
      ],
      "version": "2.9.59",
      "effectsApplied": true
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Booming Blade",
          "type": "script",
          "author": "otqBqyqMuTGDffTr",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "// booming blade\n\nconst lastArg = args[args.length - 1];\n\n// macro vars\nconst sequencerFile = \"jb2a.static_electricity.01.blue\";\nconst sequencerScale = 1.5;\nconst damageType = \"thunder\";\n\n// sequencer caller for effects on target\nfunction sequencerEffect(target, file, scale) {\n  if (game.modules.get(\"sequencer\")?.active && hasProperty(Sequencer.Database.entries, \"jb2a\")) {\n    new Sequence().effect().file(file).atLocation(target).scaleToObject(scale).play();\n  }\n}\n\nfunction weaponAttack(caster, sourceItemData, origin, target) {\n  const chosenWeapon = DAE.getFlag(caster, \"boomingBladeChoice\");\n  const filteredWeapons = caster.items.filter((i) => i.data.type === \"weapon\" && i.data.data.equipped);\n  let weapon_content = \"\";\n\n  //Filter for weapons\n  filteredWeapons.forEach((weapon) => {\n    weapon_content += `<label class=\"radio-label\">\n    <input type=\"radio\" name=\"weapon\" value=\"${weapon.id}\">\n    <img src=\"${weapon.img}\" style=\"border:0px; width: 50px; height:50px;\">\n    ${weapon.data.name}\n    </label>`;\n  });\n\n  let content = `\n    <style>\n    .weapon .form-group {\n        display: flex;\n        flex-wrap: wrap;\n        width: 100%;\n        align-items: flex-start;\n      }\n\n      .weapon .radio-label {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        text-align: center;\n        justify-items: center;\n        flex: 1 0 25%;\n        line-height: normal;\n      }\n\n      .weapon .radio-label input {\n        display: none;\n      }\n\n      .weapon img {\n        border: 0px;\n        width: 50px;\n        height: 50px;\n        flex: 0 0 50px;\n        cursor: pointer;\n      }\n\n      /* CHECKED STYLES */\n      .weapon [type=radio]:checked + img {\n        outline: 2px solid #f00;\n      }\n    </style>\n    <form class=\"weapon\">\n      <div class=\"form-group\" id=\"weapons\">\n          ${weapon_content}\n      </div>\n    </form>\n  `;\n\n  new Dialog({\n    title: \"Booming Blade: Choose a weapon to attack with\",\n    content,\n    buttons: {\n      Ok: {\n        label: \"Ok\",\n        callback: async (html) => {\n          const characterLevel = caster.data.type === \"character\" ? caster.data.data.details.level : caster.data.data.details.cr;\n          const cantripDice = 1 + Math.floor((characterLevel + 1) / 6);\n          const itemId = $(\"input[type='radio'][name='weapon']:checked\").val();\n          const weaponItem = caster.getEmbeddedDocument(\"Item\", itemId);\n          DAE.setFlag(caster, \"boomingBladeChoice\", itemId);\n          const weaponCopy = duplicate(weaponItem);\n          delete weaponCopy._id;\n          if (cantripDice > 0) {\n            weaponCopy.data.damage.parts[0][0] += ` + ${cantripDice - 1}d8[${damageType}]`;\n          }\n          weaponCopy.name = weaponItem.name + \" [Booming Blade]\";\n          weaponCopy.effects.push({\n            changes: [{ key: \"macro.itemMacro\", mode: 0, value: \"\", priority: \"20\", }],\n            disabled: false,\n            duration: { rounds: 1 },\n            icon: sourceItemData.img,\n            label: sourceItemData.name,\n            origin,\n            transfer: false,\n            flags: { targetUuid: target.uuid, casterUuid: caster.uuid, origin, cantripDice, damageType, dae: { specialDuration: [\"turnStartSource\", \"isMoved\"], transfer: false }},\n          });\n          setProperty(weaponCopy, \"flags.itemacro\", duplicate(sourceItemData.flags.itemacro));\n          setProperty(weaponCopy, \"flags.midi-qol.effectActivation\", false);\n          const attackItem = new CONFIG.Item.documentClass(weaponCopy, { parent: caster });\n          const options = { showFullCard: false, createWorkflow: true, configureDialog: true };\n          await MidiQOL.completeItemRoll(attackItem, options);\n        },\n      },\n      Cancel: {\n        label: \"Cancel\",\n      },\n    },\n  }).render(true);\n}\n\nif(args[0].tag === \"OnUse\"){\n  if (lastArg.targets.length > 0) {\n    const casterData = await fromUuid(lastArg.actorUuid);\n    const caster = casterData.actor ? casterData.actor : casterData;\n    weaponAttack(caster, lastArg.itemData, lastArg.uuid, lastArg.targets[0]);\n  } else {\n    ui.notifications.error(\"Booming Blade: No target selected: please select a target and try again.\");\n  }\n\n} else if (args[0] === \"on\") {\n  const targetToken = canvas.tokens.get(lastArg.tokenId);\n  sequencerEffect(targetToken, sequencerFile, sequencerScale);\n} else if (args[0] === \"off\") {\n  // uses midis move flag to determine if to apply extra damage\n  if (lastArg[\"expiry-reason\"] === \"midi-qol:isMoved\" || lastArg[\"expiry-reaason\"] === \"midi-qol:isMoved\") {\n    const targetToken = await fromUuid(lastArg.tokenUuid);\n    const sourceItem = await fromUuid(lastArg.efData.flags.origin);\n    const caster = sourceItem.parent;\n    const casterToken = canvas.tokens.placeables.find((t) => t.actor?.uuid === caster.uuid);\n    const damageRoll = await new Roll(`${lastArg.efData.flags.cantripDice}d8[${damageType}]`).evaluate({ async: true });\n    if (game.dice3d) game.dice3d.showForRoll(damageRoll);\n    const workflowItemData = duplicate(sourceItem.data);\n    workflowItemData.data.target = { value: 1, units: \"\", type: \"creature\" };\n    workflowItemData.name = \"Booming Blade: Movement Damage\";\n\n    await new MidiQOL.DamageOnlyWorkflow(\n      caster,\n      casterToken.data,\n      damageRoll.total,\n      damageType,\n      [targetToken],\n      damageRoll,\n      {\n        flavor: `(${CONFIG.DND5E.damageTypes[damageType]})`,\n        itemCardId: \"new\",\n        itemData: workflowItemData,\n        isCritical: false,\n      }\n    );\n    sequencerEffect(targetToken, sequencerFile, sequencerScale);\n  }\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        },
        "_id": null,
        "name": "Booming Blade",
        "type": "script",
        "author": "ckiTPzlaPztdkjV6",
        "img": "icons/svg/dice-target.svg",
        "scope": "global",
        "command": "// booming blade\n\nconst lastArg = args[args.length - 1];\n\n// macro vars\nconst sequencerFile = \"jb2a.static_electricity.01.blue\";\nconst sequencerScale = 1.5;\nconst damageType = \"thunder\";\n\n// sequencer caller for effects on target\nfunction sequencerEffect(target, file, scale) {\n  if (game.modules.get(\"sequencer\")?.active && hasProperty(Sequencer.Database.entries, \"jb2a\")) {\n    new Sequence().effect().file(file).atLocation(target).scaleToObject(scale).play();\n  }\n}\n\nfunction weaponAttack(caster, sourceItemData, origin, target) {\n  const chosenWeapon = DAE.getFlag(caster, \"boomingBladeChoice\");\n  const filteredWeapons = caster.items.filter((i) => i.data.type === \"weapon\" && i.data.data.equipped);\n  let weapon_content = \"\";\n\n  //Filter for weapons\n  filteredWeapons.forEach((weapon) => {\n    weapon_content += `<label class=\"radio-label\">\n    <input type=\"radio\" name=\"weapon\" value=\"${weapon.id}\">\n    <img src=\"${weapon.img}\" style=\"border:0px; width: 50px; height:50px;\">\n    ${weapon.data.name}\n    </label>`;\n  });\n\n  let content = `\n    <style>\n    .weapon .form-group {\n        display: flex;\n        flex-wrap: wrap;\n        width: 100%;\n        align-items: flex-start;\n      }\n\n      .weapon .radio-label {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        text-align: center;\n        justify-items: center;\n        flex: 1 0 25%;\n        line-height: normal;\n      }\n\n      .weapon .radio-label input {\n        display: none;\n      }\n\n      .weapon img {\n        border: 0px;\n        width: 50px;\n        height: 50px;\n        flex: 0 0 50px;\n        cursor: pointer;\n      }\n\n      /* CHECKED STYLES */\n      .weapon [type=radio]:checked + img {\n        outline: 2px solid #f00;\n      }\n    </style>\n    <form class=\"weapon\">\n      <div class=\"form-group\" id=\"weapons\">\n          ${weapon_content}\n      </div>\n    </form>\n  `;\n\n  new Dialog({\n    title: \"Booming Blade: Choose a weapon to attack with\",\n    content,\n    buttons: {\n      Ok: {\n        label: \"Ok\",\n        callback: async (html) => {\n          const characterLevel = caster.data.type === \"character\" ? caster.data.data.details.level : caster.data.data.details.cr;\n          const cantripDice = 1 + Math.floor((characterLevel + 1) / 6);\n          const itemId = $(\"input[type='radio'][name='weapon']:checked\").val();\n          const weaponItem = caster.getEmbeddedDocument(\"Item\", itemId);\n          DAE.setFlag(caster, \"boomingBladeChoice\", itemId);\n          const weaponCopy = duplicate(weaponItem);\n          delete weaponCopy._id;\n          if (cantripDice > 0) {\n            weaponCopy.data.damage.parts[0][0] += ` + ${cantripDice - 1}d8[${damageType}]`;\n          }\n          weaponCopy.name = weaponItem.name + \" [Booming Blade]\";\n          weaponCopy.effects.push({\n            changes: [{ key: \"macro.itemMacro\", mode: 0, value: \"\", priority: \"20\", }],\n            disabled: false,\n            duration: { rounds: 1 },\n            icon: sourceItemData.img,\n            label: sourceItemData.name,\n            origin,\n            transfer: false,\n            flags: { targetUuid: target.uuid, casterUuid: caster.uuid, origin, cantripDice, damageType, dae: { specialDuration: [\"turnStartSource\", \"isMoved\"], transfer: false }},\n          });\n          setProperty(weaponCopy, \"flags.itemacro\", duplicate(sourceItemData.flags.itemacro));\n          setProperty(weaponCopy, \"flags.midi-qol.effectActivation\", false);\n          const attackItem = new CONFIG.Item.documentClass(weaponCopy, { parent: caster });\n          const options = { showFullCard: false, createWorkflow: true, configureDialog: true };\n          await MidiQOL.completeItemRoll(attackItem, options);\n        },\n      },\n      Cancel: {\n        label: \"Cancel\",\n      },\n    },\n  }).render(true);\n}\n\nif(args[0].tag === \"OnUse\"){\n  if (lastArg.targets.length > 0) {\n    const casterData = await fromUuid(lastArg.actorUuid);\n    const caster = casterData.actor ? casterData.actor : casterData;\n    weaponAttack(caster, lastArg.itemData, lastArg.uuid, lastArg.targets[0]);\n  } else {\n    ui.notifications.error(\"Booming Blade: No target selected: please select a target and try again.\");\n  }\n\n} else if (args[0] === \"on\") {\n  const targetToken = canvas.tokens.get(lastArg.tokenId);\n  sequencerEffect(targetToken, sequencerFile, sequencerScale);\n} else if (args[0] === \"off\") {\n  // uses midis move flag to determine if to apply extra damage\n  if (lastArg[\"expiry-reason\"] === \"midi-qol:isMoved\") {\n    const targetToken = await fromUuid(lastArg.tokenUuid);\n    const sourceItem = await fromUuid(lastArg.efData.flags.origin);\n    const caster = sourceItem.parent;\n    const casterToken = canvas.tokens.placeables.find((t) => t.actor?.uuid === caster.uuid);\n    const damageRoll = await new Roll(`${lastArg.efData.flags.cantripDice}d8[${damageType}]`).evaluate({ async: true });\n    if (game.dice3d) game.dice3d.showForRoll(damageRoll);\n    const workflowItemData = duplicate(sourceItem.data);\n    workflowItemData.data.target = { value: 1, units: \"\", type: \"creature\" };\n    workflowItemData.name = \"Booming Blade: Movement Damage\";\n\n    await new MidiQOL.DamageOnlyWorkflow(\n      caster,\n      casterToken.data,\n      damageRoll.total,\n      damageType,\n      [targetToken],\n      damageRoll,\n      {\n        flavor: `(${CONFIG.DND5E.damageTypes[damageType]})`,\n        itemCardId: \"new\",\n        itemData: workflowItemData,\n        isCritical: false,\n      }\n    );\n    sequencerEffect(targetToken, sequencerFile, sequencerScale);\n  }\n}",
        "folder": null,
        "sort": 0,
        "permission": {
          "default": 0
        },
        "flags": {}
      }
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "core": {
      "sourceId": "Compendium.world.ddb-spells.K7ECi6VTenyLNymE"
    },
    "rest-recovery": {
      "data": {
        "recovery": {
          "enabled": false
        }
      }
    },
    "scene-packer": {
      "sourceId": "Item.AAh95bwU0RvpshuG",
      "hash": "ddea1f097b76dcbe264937c45e3a2f783828a5de"
    },
    "inventory-plus": {
      "category": "weapon"
    },
    "exportSource": {
      "world": "dnd5e",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.3"
    }
  }
}