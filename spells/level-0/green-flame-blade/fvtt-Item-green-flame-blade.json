{
  "name": "Green-Flame Blade",
  "type": "spell",
  "img": "systems/dnd5e/icons/skills/green_06.jpg",
  "data": {
    "description": {
      "value": "<p>You brandish the weapon used in the spell’s casting and make a melee attack with it against one creature within 5 feet of you. On a hit, the target suffers the weapon attack’s normal effects, and you can cause green fire to leap from the target to a different creature of your choice that you can see within 5 feet of it. The second creature takes fire damage equal to your spellcasting ability modifier.</p>\n<p>This spell’s damage increases when you reach certain levels. At 5th level, the melee attack deals an extra 1d8 fire damage to the target on a hit, and the fire damage to the second creature increases to 1d8 + your spellcasting ability modifier. Both damage rolls increase by 1d8 at 11th level (2d8 and 2d8) and 17th level (3d8 and 3d8).</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Sword Coast Adventurer's Guide pg 142",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "[fire] To Second Target",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 0,
    "school": "evo",
    "components": {
      "value": "a melee weapon worth at least 1 sp",
      "vocal": false,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "a melee weapon worth at least 1 sp",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "cantrip",
      "formula": "1d8"
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 157538,
      "definitionId": 2411,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "originalName": "Green-Flame Blade",
      "sources": [
        {
          "sourceId": 13,
          "pageNumber": 142,
          "sourceType": 1
        }
      ],
      "tags": [
        "Damage",
        "Combat"
      ],
      "version": "2.9.59",
      "effectsApplied": true
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Green-Flame Blade",
          "type": "script",
          "author": "otqBqyqMuTGDffTr",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "// green-flame blade\n\nconst lastArg = args[args.length - 1];\n\n// macro vars\nconst damageType = \"fire\";\nconst patreonSecondary = \"jb2a.chain_lightning.secondary.green\";\n\nconst baseAutoAnimation = {\n  version: 4,\n  killAnim: false,\n  options: {\n    ammo: false,\n    menuType: \"weapon\",\n    variant: \"01\",\n    enableCustom: false,\n    repeat: null,\n    delay: null,\n    scale: null,\n    customPath: \"\",\n  },\n  override: true,\n  autoOverride: {\n    enable: false,\n    variant: \"01\",\n    color: \"darkorangepurple\",\n    repeat: null,\n    delay: null,\n    scale: null,\n  },\n  sourceToken: {\n    enable: false,\n  },\n  targetToken: {\n    enable: false,\n  },\n  animLevel: false,\n  animType: \"melee\",\n  animation: \"shortsword\",\n  color: \"green\",\n  preview: false,\n  meleeSwitch: {\n    switchType: \"on\",\n    returning: false,\n  },\n};\n\n\n// sequencer caller for effects on target\nfunction sequencerEffect(target, origin = null) {\n  if (game.modules.get(\"sequencer\")?.active) {\n    if (Sequencer.Database.entryExists(patreonSecondary)) {\n      new Sequence()\n        .effect()\n        .atLocation(origin)\n        .stretchTo(target)\n        .file(Sequencer.Database.entryExists(patreonSecondary))\n        .repeats(1, 200, 300)\n        .randomizeMirrorY()\n        .play();\n    }\n  }\n}\n\nasync function findTargets(originToken, range, includeOrigin = false, excludeActorIds = []) {\n  const aoeTargets = await canvas.tokens.placeables.filter((placeable) =>\n    (includeOrigin || placeable.id !== originToken.id) &&\n    !excludeActorIds.includes(placeable.actor?.id) &&\n    placeable.actor?.data.data.attributes.hp.value !== 0 &&\n    MidiQOL.getDistance(originToken, placeable, false) <= 5 &&\n    !canvas.walls.checkCollision(new Ray(originToken.center, placeable.center)\n  ));\n  return aoeTargets;\n}\n\nfunction weaponAttack(caster, sourceItemData, origin, target) {\n  const chosenWeapon = DAE.getFlag(caster, \"greenFlameBladeChoice\");\n  const filteredWeapons = caster.items.filter((i) =>\n    i.data.type === \"weapon\" && i.data.data.equipped &&\n    i.data.data.activation.type ===\"action\" && i.data.data.actionType == \"mwak\"\n  );\n\n  let weapon_content = \"\";\n\n  //Filter for weapons\n  filteredWeapons.forEach((weapon) => {\n    weapon_content += `<label class=\"radio-label\">\n  <input type=\"radio\" name=\"weapon\" value=\"${weapon.id}\">\n  <img src=\"${weapon.img}\" style=\"border:0px; width: 50px; height:50px;\">\n  ${weapon.data.name}\n</label>`;\n  });\n\n  let content = `\n    <style>\n    .weapon .form-group {\n        display: flex;\n        flex-wrap: wrap;\n        width: 100%;\n        align-items: flex-start;\n      }\n\n      .weapon .radio-label {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        text-align: center;\n        justify-items: center;\n        flex: 1 0 25%;\n        line-height: normal;\n      }\n\n      .weapon .radio-label input {\n        display: none;\n      }\n\n      .weapon img {\n        border: 0px;\n        width: 50px;\n        height: 50px;\n        flex: 0 0 50px;\n        cursor: pointer;\n      }\n\n      /* CHECKED STYLES */\n      .weapon [type=radio]:checked + img {\n        outline: 2px solid #f00;\n      }\n    </style>\n    <form class=\"weapon\">\n      <div class=\"form-group\" id=\"weapons\">\n          ${weapon_content}\n      </div>\n    </form>\n  `;\n\n\n  new Dialog({\n    title: \"Green Flame Blade: Choose a weapon to attack with\",\n    content,\n    buttons: {\n      Ok: {\n        label: \"Ok\",\n        callback: async (html) => {\n          const characterLevel = caster.data.type === \"character\" ? caster.data.data.details.level : caster.data.data.details.cr;\n          const cantripDice = 1 + Math.floor((characterLevel + 1) / 6);\n          const itemId = $(\"input[type='radio'][name='weapon']:checked\").val();\n          const weaponItem = caster.getEmbeddedDocument(\"Item\", itemId);\n          DAE.setFlag(caster, \"greenFlameBladeChoice\", itemId);\n          const weaponCopy = duplicate(weaponItem);\n          delete weaponCopy._id;\n          if (cantripDice > 0) {\n            weaponCopy.data.damage.parts[0][0] += ` + ${cantripDice - 1}d8[${damageType}]`;\n          }\n          weaponCopy.name = weaponItem.name + \" [Green Flame Blade]\";\n          weaponCopy.effects.push({\n            changes: [{ key: \"macro.itemMacro\", mode: 0, value: \"\", priority: \"20\", }],\n            disabled: false,\n            icon: sourceItemData.img,\n            label: sourceItemData.name,\n            origin,\n            transfer: false,\n            flags: { targetUuid: target.uuid, casterId: caster.id, origin, cantripDice, damageType, dae: { transfer: false, specialDuration: [\"isAttacked\"] }},\n          });\n          setProperty(weaponCopy, \"flags.itemacro\", duplicate(sourceItemData.flags.itemacro));\n          setProperty(weaponCopy, \"flags.midi-qol.effectActivation\", false);\n\t\t  const attackItem = new CONFIG.Item.documentClass(weaponCopy, { parent: caster });\n          const options = { showFullCard: false, createWorkflow: true, configureDialog: true };\n          await MidiQOL.completeItemRoll(attackItem, options);\n        },\n      },\n      Cancel: {\n        label: \"Cancel\",\n      },\n    },\n  }).render(true);\n}\n\nasync function attackNearby(originToken, ignoreIds) {\n  const potentialTargets = await findTargets(originToken, 5, false, ignoreIds);\n  if (potentialTargets.length === 0) return;\n  const sourceItem = await fromUuid(lastArg.efData.flags.origin);\n  const caster = sourceItem.parent;\n  const casterToken = canvas.tokens.placeables.find((t) => t.actor?.uuid === caster.uuid);\n  const targetContent = potentialTargets.map((t) => `<option value=\"${t.id}\">${t.name}</option>`).join(\"\");\n  const content = `<div class=\"form-group\"><label>Targets : </label><select name=\"secondaryTargetId\"}>${targetContent}</select></div>`;\n\n  new Dialog({\n    title: \"Green Flame Blade: Choose a secondary target to attack\",\n    content,\n    buttons: {\n      Choose: {\n        label: \"Choose\",\n        callback: async (html) => {\n          const selectedId = html.find(\"[name=secondaryTargetId]\")[0].value;\n          const targetToken = canvas.tokens.get(selectedId);\n          const sourceItem = await fromUuid(lastArg.efData.flags.origin);\n          const mod = caster.data.data.abilities[sourceItem.abilityMod].mod;\n          const damageRoll = await new Roll(`${lastArg.efData.flags.cantripDice - 1}d8[${damageType}] + ${mod}`).evaluate({ async: true });\n          if (game.dice3d) game.dice3d.showForRoll(damageRoll);\n          const workflowItemData = duplicate(sourceItem.data);\n          workflowItemData.data.target = { value: 1, units: \"\", type: \"creature\" };\n          workflowItemData.name = \"Green Flame Blade: Secondary Damage\";\n\n          await new MidiQOL.DamageOnlyWorkflow(\n            caster,\n            casterToken.data,\n            damageRoll.total,\n            damageType,\n            [targetToken],\n            damageRoll,\n            {\n              flavor: `(${CONFIG.DND5E.damageTypes[damageType]})`,\n              itemCardId: \"new\",\n              itemData: workflowItemData,\n              isCritical: false,\n            }\n          );\n          sequencerEffect(targetToken, originToken);\n        },\n      },\n      Cancel: {\n        label: \"Cancel\",\n      },\n    },\n  }).render(true);\n}\n\nif (args[0].tag === \"OnUse\"){\n  if (lastArg.targets.length > 0) {\n    const casterData = await fromUuid(lastArg.actorUuid);\n    const caster = casterData.actor ? casterData.actor : casterData;\n    weaponAttack(caster, lastArg.itemData, lastArg.uuid, lastArg.targets[0]);\n  } else {\n    ui.notifications.error(\"Green Flame Blade: No target selected: please select a target and try again.\");\n  }\n} else if (args[0] === \"on\") {\n  const targetToken = canvas.tokens.get(lastArg.tokenId);\n  const casterId = lastArg.efData.flags.casterId;\n  console.log(`Checking ${targetToken.name} for nearby tokens for Green-Flame Blade from ${casterId}`);\n  await attackNearby(targetToken, [casterId]);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "rest-recovery": {
      "data": {
        "recovery": {
          "enabled": false
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "core": {
      "sourceId": "Compendium.world.ddb-spells.5LqdDqKdlwKkuiO6"
    },
    "scene-packer": {
      "sourceId": "Item.NMU5mGT8x4DE21XK",
      "hash": "6e7a938a25b943929f0c2af810fb389148e0ebf5"
    },
    "exportSource": {
      "world": "Curse of Strahd",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.3"
    }
  }
}