{
  "name": "Create Bonfire",
  "type": "spell",
  "img": "systems/dnd5e/icons/skills/red_30.jpg",
  "data": {
    "description": {
      "value": "<p class=\"Core-Styles_Core-Body\">You create a bonfire on ground that you can see within range. Until the spell ends, the magic bonfire fills a 5-foot cube. Any creature in the bonfire’s space when you cast the spell must succeed on a Dexterity saving throw or take 1d8 fire damage. A creature must also make the saving throw when it moves into the bonfire’s space for the first time on a turn or ends its turn there.</p>\n<p class=\"Core-Styles_Core-Body\">The bonfire ignites flammable objects in its area that aren’t being worn or carried.</p>\n<p class=\"Core-Styles_Core-Body\">The spell’s damage increases by 1d8 when you reach 5th level (2d8), 11th level (3d8), and 17th level (4d8).</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Elemental Evil Player's Companion pg 152",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 5,
      "width": null,
      "units": "ft",
      "type": "cube"
    },
    "range": {
      "value": 60,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [
        [
          "1d8[fire]",
          "fire"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "dex",
      "dc": null,
      "scaling": "spell"
    },
    "level": 0,
    "school": "con",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "cantrip",
      "formula": "1d8"
    }
  },
  "effects": [
    {
      "label": "Create Bonfire",
      "icon": "systems/dnd5e/icons/skills/red_30.jpg",
      "changes": [
        {
          "key": "flags.midi-qol.OverTime",
          "mode": 0,
          "value": "turn=end,label=Create Bonfire (End of Turn),damageRoll=(@cantripDice)d8,damageType=fire,saveRemove=false,saveDC=@attributes.spelldc,saveAbility=dex,saveDamage=nodamage,killAnim=true",
          "priority": "20"
        },
        {
          "key": "macro.itemMacro",
          "value": "",
          "mode": 0,
          "priority": 20
        }
      ],
      "duration": {
        "seconds": 60,
        "startTime": null
      },
      "tint": null,
      "transfer": false,
      "disabled": false,
      "flags": {
        "dae": {
          "transfer": false,
          "stackable": "none"
        },
        "ddbimporter": {
          "disabled": false
        },
        "midi-qol": {
          "forceCEOff": true
        },
        "ActiveAuras": {
          "isAura": true,
          "aura": "All",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "onlyOnce": false,
          "save": "dex",
          "savedc": null,
          "displayTemp": true
        }
      },
      "_id": "qkf3ashdsmah7eka"
    }
  ],
  "flags": {
    "ddbimporter": {
      "id": 137964,
      "definitionId": 2373,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "originalName": "Create Bonfire",
      "sources": [
        {
          "sourceId": 4,
          "pageNumber": 152,
          "sourceType": 1
        }
      ],
      "tags": [
        "Damage",
        "Control"
      ],
      "version": "2.9.64",
      "effectsApplied": true,
      "effect": {
        "dice": "1d8[fire]",
        "damageType": "fire",
        "save": "dex",
        "sequencerFile": "jb2a.flames.01.orange",
        "isCantrip": true,
        "saveOnEntry": true
      }
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Create Bonfire",
          "type": "script",
          "author": "otqBqyqMuTGDffTr",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "if(!game.modules.get(\"ActiveAuras\")?.active) {\n    ui.notifications.error(\"ActiveAuras is not enabled\");\n    return;\n  }\n  \n  const lastArg = args[args.length - 1];\n  \n  function getCantripDice(actor) {\n    const level = actor.type === \"character\" ? actor.data.details.level : actor.data.details.cr;\n    return 1 + Math.floor((level + 1) / 6);\n  }\n  \n  async function rollItemDamage(targetToken, itemUuid, itemLevel) {\n    const item = await fromUuid(itemUuid);\n    const caster = item.parent;\n    const ddbEffectFlags = item.data.flags.ddbimporter.effect;\n    const isCantrip = ddbEffectFlags.isCantrip;\n    const damageDice = ddbEffectFlags.dice;\n    const damageType = ddbEffectFlags.damageType;\n    const saveAbility = ddbEffectFlags.save;\n    const casterToken = canvas.tokens.placeables.find((t) => t.actor?.uuid === caster.uuid);\n    const scalingDiceArray = item.data.data.scaling.formula.split(\"d\");\n    const scalingDiceNumber = itemLevel - item.data.data.level;\n    const upscaledDamage =  isCantrip\n      ? `${getCantripDice(caster.data)}d${scalingDiceArray[1]}[${damageType}]`\n      : scalingDiceNumber > 0 ? `${scalingDiceNumber}d${scalingDiceArray[1]}[${damageType}] + ${damageDice}` : damageDice;\n  \n    const workflowItemData = duplicate(item.data);\n    workflowItemData.data.target = { value: 1, units: \"\", type: \"creature\" };\n    workflowItemData.data.save.ability = saveAbility;\n    workflowItemData.data.components.concentration = false;\n    workflowItemData.data.level = itemLevel;\n    workflowItemData.data.duration = { value: null, units: \"inst\" };\n    workflowItemData.data.target = { value: null, width: null, units: \"\", type: \"creature\" };\n  \n    setProperty(workflowItemData, \"flags.itemacro\", {});\n    setProperty(workflowItemData, \"flags.midi-qol\", {});\n    setProperty(workflowItemData, \"flags.dae\", {});\n    setProperty(workflowItemData, \"effects\", []);\n    delete workflowItemData._id;\n  \n    const saveOnEntry = ddbEffectFlags.saveOnEntry;\n    console.warn(\"saveOnEntry\", {ddbEffectFlags, saveOnEntry});\n    if (saveOnEntry) {\n      const entryItem = new CONFIG.Item.documentClass(workflowItemData, { parent: caster });\n      console.warn(\"Saving item on entry\", {entryItem, targetToken});\n      const options = {\n        showFullCard: false,\n        createWorkflow: true,\n        targetUuids: [targetToken.document.uuid],\n        configureDialog: false,\n        versatile: false,\n        consumeResource: false,\n        consumeSlot: false,\n      };\n      await MidiQOL.completeItemRoll(entryItem, options);\n    } else {\n      const damageRoll = await new Roll(upscaledDamage).evaluate({ async: true });\n      if (game.dice3d) game.dice3d.showForRoll(damageRoll);\n  \n      workflowItemData.name = `${workflowItemData.name}: Turn Entry Damage`;\n      // console.warn(\"workflowItemData\", workflowItemData);\n  \n      await new MidiQOL.DamageOnlyWorkflow(\n        caster,\n        casterToken.data,\n        damageRoll.total,\n        damageType,\n        [targetToken],\n        damageRoll,\n        {\n          flavor: `(${CONFIG.DND5E.damageTypes[damageType]})`,\n          itemCardId: \"new\",\n          itemData: workflowItemData,\n          isCritical: false,\n        }\n      );\n    }\n  \n  }\n  \n  if (args[0].tag === \"OnUse\" && args[0].macroPass === \"preActiveEffects\") {\n    const safeName = lastArg.itemData.name.replace(/\\s|'|\\.|’/g, \"_\");\n    const dataTracker = {\n      randomId: randomID(),\n      targetUuids: lastArg.targetUuids,\n      startRound: game.combat.round,\n      startTurn: game.combat.turn,\n      spellLevel: lastArg.spellLevel,\n    };\n  \n    const item = await fromUuid(lastArg.itemUuid);\n    // await item.update(dataTracker);\n    await DAE.unsetFlag(item, `${safeName}Tracker`);\n    await DAE.setFlag(item, `${safeName}Tracker`, dataTracker);\n  \n    const ddbEffectFlags = lastArg.item.flags.ddbimporter?.effect;\n    const newArgs = duplicate(args);\n    if (ddbEffectFlags) {\n      if (ddbEffectFlags.isCantrip) {\n        const cantripDice = getCantripDice(lastArg.actor);\n        newArgs[0].spellLevel = cantripDice;\n        ddbEffectFlags.cantripDice = cantripDice;\n        let newEffects = newArgs[0].item.effects.map((effect) => {\n          effect.changes = effect.changes.map((change) => {\n            change.value = change.value.replace(\"@cantripDice\", cantripDice)\n            return change;\n          });\n          return effect;\n        });\n        newArgs[0].item.effects = duplicate(newEffects);\n        newArgs[0].itemData.effects = duplicate(newEffects);\n      }\n      const template = await fromUuid(lastArg.templateUuid);\n      await template.update({\"flags.effect\": ddbEffectFlags});\n    }\n  \n    return await AAhelpers.applyTemplate(newArgs);\n  \n  } else if (args[0] == \"on\") {\n    const safeName = lastArg.efData.label.replace(/\\s|'|\\.|’/g, \"_\");\n    const item = await fromUuid(lastArg.efData.origin);\n    const targetItemTracker = DAE.getFlag(item.parent, `${safeName}Tracker`);\n    const originalTarget = targetItemTracker.targetUuids.includes(lastArg.tokenUuid);\n    const target = canvas.tokens.get(lastArg.tokenId);\n    const targetTokenTrackerFlag = DAE.getFlag(target, `${safeName}Tracker`);\n    const targetedThisCombat = targetTokenTrackerFlag && targetItemTracker.randomId === targetTokenTrackerFlag.randomId;\n    const targetTokenTracker = targetedThisCombat\n      ? targetTokenTrackerFlag\n      : {\n        randomId: targetItemTracker.randomId,\n        round: game.combat.round,\n        turn: game.combat.turn,\n        hasLeft: false,\n      };\n  \n    const castTurn = targetItemTracker.startRound === game.combat.round && targetItemTracker.startTurn === game.combat.turn;\n    const isLaterTurn = game.combat.round > targetTokenTracker.round || game.combat.turn > targetTokenTracker.turn;\n  \n    // if:\n    // not cast turn, and not part of the original target\n    // AND one of the following\n    // not original template and have not yet had this effect applied this combat OR\n    // has been targeted this combat, left and re-entered effect, and is a later turn\n    if (castTurn && originalTarget) {\n      console.debug(`Token ${target.name} is part of the original target for ${item.name}`);\n    } else if (!targetedThisCombat || (targetedThisCombat && targetTokenTracker.hasLeft && isLaterTurn)){\n      console.debug(`Token ${target.name} is targeted for immediate damage with ${item.name}, using the following factors`, { originalTarget, castTurn, targetedThisCombat, targetTokenTracker, isLaterTurn });\n      targetTokenTracker.hasLeft = false;\n      await rollItemDamage(target, lastArg.efData.origin, targetItemTracker.spellLevel);\n    }\n    await DAE.setFlag(target, `${safeName}Tracker`, targetTokenTracker);\n  } else if (args[0] == \"off\") {\n    const safeName = lastArg.efData.label.replace(/\\s|'|\\.|’/g, \"_\");\n    const target = canvas.tokens.get(lastArg.tokenId);\n    const targetTokenTracker = DAE.getFlag(target, `${safeName}Tracker`);\n  \n    if (targetTokenTracker) {\n      targetTokenTracker.hasLeft = true;\n      targetTokenTracker.turn = game.combat.turn;\n      targetTokenTracker.round = game.combat.round;\n      await DAE.setFlag(target, `${safeName}Tracker`, targetTokenTracker);\n    }\n  }",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midi-qol": {
      "onUseMacroName": "[preActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "core": {
      "sourceId": "Compendium.world.ddb-spells-2.odj172H63OVnuToJ"
    },
    "scene-packer": {
      "hash": "9c8c3a3117552621a25a546885087ff55e47b952",
      "sourceId": "Item.n1DU8y6GpYMtp2fI"
    },
    "rest-recovery": {
      "data": {
        "recovery": {
          "enabled": false
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "Curse of Strahd",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.3"
    }
  }
}