{
  "name": "Word of Radiance",
  "type": "spell",
  "img": "systems/dnd5e/icons/spells/air-burst-air-2.jpg",
  "data": {
    "description": {
      "value": "<p class=\"Core-Styles_Core-Body\">You utter a divine word, and burning radiance erupts from you. Each creature of your choice that you can see within range must succeed on a Constitution saving throw or take 1d6 radiant damage.</p>\n<p class=\"Core-Styles_Core-Body\">The spellâ€™s damage increases by 1d6 when you reach 5th level (2d6), 11th level (3d6), and 17th level (4d6).</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Xanathar's Guide to Everything pg 171",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 0,
    "school": "evo",
    "components": {
      "value": "a holy symbol",
      "vocal": true,
      "somatic": false,
      "material": true,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "a holy symbol",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 138298,
      "definitionId": 14618,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "originalName": "Word of Radiance",
      "sources": [
        {
          "sourceId": 27,
          "pageNumber": 171,
          "sourceType": 1
        }
      ],
      "tags": [
        "Damage"
      ],
      "version": "2.9.59",
      "effectsApplied": true
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "core": {
      "sourceId": "Compendium.world.ddb-spells.tMGMyhSPeT6n3dK0"
    },
    "rest-recovery": {
      "data": {
        "recovery": {
          "enabled": false
        }
      }
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Word of Radiance",
          "type": "script",
          "author": "otqBqyqMuTGDffTr",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "// word of radiance\n\n// Midi-Qol On Use Macro\n// Let the macro do the saving throw and damage. Just assign Action type as Utility\nasync function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }\n(async () => {\n    let tokenD = canvas.tokens.get(args[0].tokenId);\n    let actorD = game.actors.get(args[0].actor._id);\n    let distance = 5;\n    let itemD = args[0].item;\n    let dc = await actorD.getRollData().attributes.spelldc;\n    let get_target = canvas.tokens.placeables.filter(target => (MidiQOL.getDistance(tokenD, target, false) <= distance && tokenD.data.disposition != target.data.disposition && !canvas.walls.checkCollision(new Ray(tokenD.center, target.center))));\n    let level = actorD.data.type === \"character\" ? actorD.data.data.details.level : actorD.data.data.details.cr;\n    let numDice = 1 + (Math.floor((level + 1) / 6));\n\tlet bonus = 0;\n\tif (actorD.items.find(i => [\"Potent Spellcasting\"].includes(i.name)) && actorD.data.data.abilities.wis.mod > 0) bonus += actorD.data.data.abilities.wis.mod;\n    let damageRoll = new Roll(`${numDice}d6 + ${bonus}`).evaluate({ async: false });\n    let abilitySave = \"con\";\n    let saveName = CONFIG.DND5E.abilities[abilitySave];\n    game.dice3d?.showForRoll(damageRoll);\n    let damageResult = [];\n    let hitTargets = [];\n    for (let target of get_target) {\n        let save;\n        await target.actor.hasPlayerOwner ? save = await target.actor.rollAbilitySave(abilitySave, { chatMessage: false }) : save = await target.actor.rollAbilitySave(abilitySave, { chatMessage: false, fastForward: true });\n        game.dice3d?.showForRoll(save);\n        if (save.total >= dc) {\n            damageResult.push(`<div class=\"midi-qol-flex-container\"><div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${target.id}\"> Target saves </div><div><img src=\"${target.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\"></div></div>`);\n\n        } else {\n            damageResult.push(`<div class=\"midi-qol-flex-container\"><div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${target.id}\"> Target fails </div><div><img src=\"${target.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\"></div></div>`);\n            hitTargets.push(target);\n        }\n    }\n    new MidiQOL.DamageOnlyWorkflow(actorD, tokenD, damageRoll.total, \"radiant\", hitTargets, damageRoll, { flavor: `(Radiant)`, itemCardId: args[0].itemCardId });\n    let damageList = damageResult.join('');\n    await wait(1000);\n    let damage_results = `<div class=\"midi-qol-nobox midi-qol-bigger-text\">${itemD.name} DC ${dc} ${saveName} Saving Throw:</div><div><div class=\"midi-qol-nobox\">${damageList}</div></div>`;\n    const chatMessage = await game.messages.get(args[0].itemCardId);\n    let content = await duplicate(chatMessage.data.content);\n    const searchString = /<div class=\"midi-qol-hits-display\">[\\s\\S]*<div class=\"end-midi-qol-hits-display\">/g;\n    const replaceString = `<div class=\"midi-qol-hits-display\"><div class=\"end-midi-qol-hits-display\">${damage_results}`;\n    content = await content.replace(searchString, replaceString);\n    await chatMessage.update({ content: content });\n})();",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        },
        "_id": null,
        "name": "Word of Radiance",
        "type": "script",
        "author": "ckiTPzlaPztdkjV6",
        "img": "icons/svg/dice-target.svg",
        "scope": "global",
        "command": "// word of radiance\n\nasync function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }\n(async () => {\n    let tokenD = canvas.tokens.get(args[0].tokenId);\n    let actorD = game.actors.get(args[0].actor._id);\n    let distance = 5;\n    let itemD = args[0].item;\n    let dc = await actorD.getRollData().attributes.spelldc;\n    let get_target = canvas.tokens.placeables.filter(target => (MidiQOL.getDistance(tokenD, target, false) <= distance && tokenD.data.disposition != target.data.disposition && !canvas.walls.checkCollision(new Ray(tokenD.center, target.center))));\n    let level = actorD.data.type === \"character\" ? actorD.data.data.details.level : actorD.data.data.details.cr;\n    let numDice = 1 + (Math.floor((level + 1) / 6));\n\tlet bonus = 0;\n\tif (actorD.items.find(i => [\"Potent Spellcasting\"].includes(i.name)) && actorD.data.data.abilities.wis.mod > 0) bonus += actorD.data.data.abilities.wis.mod;\n    let damageRoll = new Roll(`${numDice}d6 + ${bonus}`).evaluate({ async: false });\n    let abilitySave = \"con\";\n    let saveName = CONFIG.DND5E.abilities[abilitySave];\n    game.dice3d?.showForRoll(damageRoll);\n    let damageResult = [];\n    let hitTargets = [];\n    for (let target of get_target) {\n        let save;\n        await target.actor.hasPlayerOwner ? save = await target.actor.rollAbilitySave(abilitySave, { chatMessage: false }) : save = await target.actor.rollAbilitySave(abilitySave, { chatMessage: false, fastForward: true });\n        game.dice3d?.showForRoll(save);\n        if (save.total >= dc) {\n            damageResult.push(`<div class=\"midi-qol-flex-container\"><div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${target.id}\"> Target saves </div><div><img src=\"${target.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\"></div></div>`);\n\n        } else {\n            damageResult.push(`<div class=\"midi-qol-flex-container\"><div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${target.id}\"> Target fails </div><div><img src=\"${target.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\"></div></div>`);\n            hitTargets.push(target);\n        }\n    }\n    new MidiQOL.DamageOnlyWorkflow(actorD, tokenD, damageRoll.total, \"radiant\", hitTargets, damageRoll, { flavor: `(Radiant)`, itemCardId: args[0].itemCardId });\n    let damageList = damageResult.join('');\n    await wait(1000);\n    let damage_results = `<div class=\"midi-qol-nobox midi-qol-bigger-text\">${itemD.name} DC ${dc} ${saveName} Saving Throw:</div><div><div class=\"midi-qol-nobox\">${damageList}</div></div>`;\n    const chatMessage = await game.messages.get(args[0].itemCardId);\n    let content = await duplicate(chatMessage.data.content);\n    const searchString = /<div class=\"midi-qol-hits-display\">[\\s\\S]*<div class=\"end-midi-qol-hits-display\">/g;\n    const replaceString = `<div class=\"midi-qol-hits-display\"><div class=\"end-midi-qol-hits-display\">${damage_results}`;\n    content = await content.replace(searchString, replaceString);\n    await chatMessage.update({ content: content });\n})();",
        "folder": null,
        "sort": 0,
        "permission": {
          "default": 0
        },
        "flags": {}
      }
    },
    "scene-packer": {
      "sourceId": "Item.0tQggJCnxaYdJ1TX",
      "hash": "51bb99d2c8b1a41ecf18fbdba8550d18602b154f"
    },
    "exportSource": {
      "world": "dnd5e",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.3"
    }
  }
}