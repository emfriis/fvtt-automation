{
  "name": "Eldritch Blast",
  "type": "spell",
  "img": "https://assets.forge-vtt.com/bazaar/systems/dnd5e/assets/icons/spells/fireball-eerie-1.jpg",
  "data": {
    "description": {
      "value": "<p>A beam of crackling energy streaks toward a creature within range. Make a ranged spell attack against the target. On a hit, the target takes 1d10 force damage.</p><p>The spell creates more than one beam when you reach higher levels: two beams at 5th level, three beams at 11th level, and four beams at 17th level. You can direct the beams at the same target or at different ones. Make a separate attack roll for each beam.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 237",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 120,
      "long": 0,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "rsak",
    "attackBonus": "0",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [
        [
          "1d10[force]",
          "force"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell",
      "value": ""
    },
    "level": 0,
    "school": "evo",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "core": {
      "sourceId": "Compendium.dnd5e.spells.Z9p1vezIn95jw1Yw"
    },
    "scene-packer": {
      "hash": "f2d550b28e83f3400cc5b1dadfcda924531dd2fa",
      "sourceId": "Item.A6BhCIrY6RH3lT7s"
    },
    "itemacro": {
      "macro": {
        "_id": null,
        "name": "Eldritch Blast",
        "type": "script",
        "author": "ckiTPzlaPztdkjV6",
        "img": "icons/svg/dice-target.svg",
        "scope": "global",
        "command": "// eldritch blast\n// on use post targeting complete\n\nasync function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }\nconst lastArg = args[args.length - 1];\nconst tokenOrActor = await fromUuid(lastArg.tokenUuid);\nconst tactor = tokenOrActor.actor ? tokenOrActor.actor : tokenOrActor;\nconst item = lastArg.item;\nconst itemSource = await fromUuid(lastArg.uuid);\nconst itemCopy = duplicate(itemSource);\nsetProperty(itemCopy, \"flags.itemacro.command\", \"\");\nsetProperty(itemCopy, \"flags.itemacro.macro\", {});\nsetProperty(itemCopy, \"flags.midi-qol.onUseMacroName\", \"\");\n//setProperty(itemCopy, \"data.preparation.mode\", \"atwill\");\nsetProperty(itemCopy, \"type\", \"feat\");\nconst attackItem = new CONFIG.Item.documentClass(itemCopy, { parent: tactor });\n\nconst tactorLevel = tactor.data.type === \"character\" ? tactor.data.data.details.level : tactor.data.data.details.cr;\nconst attacks = 1 + Math.floor((tactorLevel + 1) / 6);\n\nasync function applyAttack(targetUuid) {\n    let rollOptions = { targetUuids: [targetUuid], showFullCard: false, createWorkflow: true };\n    await MidiQOL.completeItemRoll(attackItem, rollOptions);\n}\n\nlet workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\nawait Object.assign(workflow, { noAutoAttack: true });\nawait Object.assign(workflow, { targets: [] });\n\nif (lastArg.targets.length === 1) {\n    for (i = 0; i < attacks; i++) {\n        await wait(250);\n        await applyAttack(lastArg.targets[0].uuid);\n    }\n} else if (lastArg.targets.length > 1) {\n    let targetContent = \"\";\n\n    lastArg.targets.forEach((t) => {\n        targetContent += `\n        <tr>\n            <td><img src=\"${t.data.img}\" style=\"border:0px; width: 100px; height:100px;\"></td>\n            <td><input type=\"num\" id=\"target\" min=\"0\" max=\"${attacks}\" name=\"${t.uuid}\"></td>\n        </tr>\n        `;\n    });\n\n    let content = `<p>You have currently <b>${attacks}</b> total ${item.name} attacks.</p><form class=\"flexcol\"><table width=\"100%\"><tbody><tr><th>Target</th><th>Number Attacks</th></tr>${targetContent}</tbody></table></form>`;\n    \n    let dialog = new Promise(async (resolve, reject) => {\n        let errorMessage;\n        new Dialog({\n            title: `${item.name}`,\n            content: content,\n            buttons: {\n                confirm: {\n                    label: \"Confirm\", callback: async (html) => {\n                        let spentTotal = 0;\n                        let selected_targets = html.find('input#target');\n                        for (let get_total of selected_targets) {\n                            spentTotal += Number(get_total.value);\n                        }\n                        if (spentTotal > attacks) {\n                            errorMessage = `The spell fails, You assigned more attacks then you have.`;\n                            return ui.notifications.error(errorMessage);\n                        }\n                        if (spentTotal === 0) {\n                            errorMessage = `The spell fails, No attacks spent.`;\n                            return ui.notifications.error(errorMessage);\n                        }\n                        for (let target of selected_targets) {\n                            let attackNum = Number(target.value);\n                            if (attackNum) {\n                                for (i = 0; i < attackNum; i++) {\n                                    await wait(250);\n                                    await applyAttack(target.name);\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            close: async (html) => {\n                if(errorMessage) reject(new Error(errorMessage));\n            },\n            default: \"confirm\"\n        }).render(true);\n    });\n    await dialog;\n}",
        "folder": null,
        "sort": 0,
        "permission": {
          "default": 0
        },
        "flags": {}
      }
    },
    "rest-recovery": {
      "data": {
        "recovery": {
          "enabled": false
        }
      }
    },
    "midi-qol": {
      "fumbleThreshold": null,
      "effectActivation": false,
      "onUseMacroName": "[preambleComplete]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "dnd5e",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.3"
    }
  }
}