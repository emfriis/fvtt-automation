{
  "name": "Relentless",
  "type": "feat",
  "img": "icons/magic/water/heart-ice-freeze.webp",
  "data": {
    "description": {
      "value": "<section class=\"secret\">\n<p>If the boar takes <strong>7 damage</strong> or less that would reduce it to <strong>0 hit points</strong>, it is reduced to <strong>1 hit point</strong> instead. Recharges on a short or long rest.</p>\n</section>\n<p>If the boar takes damage that would reduce it to <strong>0 hit points</strong>, it is reduced to <strong>1 hit point</strong> instead.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "special",
      "cost": null,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": 1,
      "max": "1",
      "per": "sr"
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    },
    "attunement": 0
  },
  "effects": [
    {
      "_id": "kk4v3qjw8qs29tsx",
      "changes": [
        {
          "key": "macro.itemMacro.GM",
          "mode": 0,
          "value": "7",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "icons/magic/water/heart-ice-freeze.webp",
      "label": "Relentless",
      "origin": "Actor.GUCNNX5qG3vtwRqZ.Item.U66PTM15QvmkenvW",
      "transfer": true,
      "flags": {
        "dae": {
          "selfTarget": false,
          "stackable": "none",
          "durationExpression": "",
          "macroRepeat": "startEveryTurn",
          "specialDuration": [],
          "transfer": true
        },
        "core": {
          "statusId": ""
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": "macro.itemMacro.GM"
    }
  ],
  "flags": {
    "rest-recovery": {
      "data": {
        "recovery": {
          "enabled": false
        }
      }
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Relentless",
          "type": "script",
          "author": "otqBqyqMuTGDffTr",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const lastArg = args[args.length - 1];\nconst tokenOrActor = await fromUuid(lastArg.actorUuid);\nconst tactor = tokenOrActor.actor ? tokenOrActor.actor : tokenOrActor;\nconst sourceItem = await fromUuid(lastArg.efData.origin);\nconst tactorItem = await tactor.items.find(i => i.name === sourceItem.name);\nconst damageThreshold = args[1];\n\nasync function damageCheck(workflow) {\n    let attackWorkflow = workflow?.damageList?.map((i) => ({ tokenId: i?.tokenId, hpDamage: i?.hpDamage, newHP: i?.newHP })).filter(i => i.tokenId === lastArg.tokenId);\n    if (!attackWorkflow || tactorItem.data.data.uses.value < 1) return;\n    let lastAttack = attackWorkflow[attackWorkflow.length - 1];\n    if (lastAttack?.hpDamage > 0 && lastAttack?.newHP < 1 && lastAttack?.hpDamage <= damageThreshold) {\n        new Dialog({\n            title: \"Relentless: Use Feature?\",\n            buttons: {\n                Ok: {\n                    label: \"Ok\",\n                    callback: () => {\n                        tactor.update({\"data.attributes.hp.value\": 1});\n\t\t\t\t        let uncon = tactor.effects.find(i => i.data.label === \"Unconscious\");\n\t\t\t\t        if (uncon) actor.deleteEmbeddedDocuments(\"ActiveEffect\", [uncon.id]);\n                        let objUpdate = new Object();\n                        objUpdate['data.uses.value'] = tactorItem.data.data.uses.value - 1;\n                        tactorItem.update(objUpdate);\n                    },\n                },\n                Cancel: {\n                    label: \"Cancel\",\n                },\n            },\n            default: \"Cancel\",\n        }).render(true);\n    }\n}\n\nif (args[0] === \"each\") { // start of turn macros always run on combat start\n    const flag = await DAE.getFlag(tactor, \"relHook\");\n    if (!flag) {\n        let hookId = Hooks.on(\"midi-qol.RollComplete\", damageCheck);\n        DAE.setFlag(tactor, \"relHook\", hookId);\n    }\n}\n\nif (args[0] === \"off\") {\n    const flag = await DAE.getFlag(tactor, \"relHook\");\n\tif (flag) {\n\t\tHooks.off(\"midi-qol.RollComplete\", flag);\n\t\tawait DAE.unsetFlag(tactor, \"relHook\");\n\t}\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "scene-packer": {
      "hash": "6b74f334f9b09c86a5b7aeb80a8c1122b0e94ff0",
      "sourceId": "Item.p2Zjz0znPEfZJTaI"
    },
    "core": {
      "sourceId": "Item.p2Zjz0znPEfZJTaI"
    },
    "exportSource": {
      "world": "Curse of Strahd",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.3"
    }
  }
}